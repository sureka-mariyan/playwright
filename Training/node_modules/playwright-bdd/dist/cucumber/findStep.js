"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findStepDefinition = void 0;
const exit_1 = require("../utils/exit");
const stepConfig_1 = require("../steps/stepConfig");
const paths_1 = require("../utils/paths");
/**
 * Finds step definition by step text.
 * See: https://github.com/cucumber/cucumber-js/blob/main/src/runtime/assemble_test_cases.ts#L103
 *
 * Handling case when several step definitions found:
 * https://github.com/cucumber/cucumber-js/blob/main/src/runtime/test_case_runner.ts#L313
 */
function findStepDefinition(supportCodeLibrary, stepText, featureFile) {
    const matchedSteps = supportCodeLibrary.stepDefinitions.filter((step) => {
        return step.matchesStepName(stepText);
    });
    if (matchedSteps.length === 0)
        return;
    if (matchedSteps.length > 1) {
        (0, exit_1.exit)(formatDuplicateStepsError(stepText, featureFile, matchedSteps));
    }
    return matchedSteps[0];
}
exports.findStepDefinition = findStepDefinition;
function formatDuplicateStepsError(stepText, featureFile, matchedSteps) {
    const stepLines = matchedSteps.map(formatDuplicateStep);
    return [
        `Multiple step definitions matched for text: "${stepText}" (${featureFile})`,
        ...stepLines,
    ].join('\n');
}
function formatDuplicateStep(step) {
    const { pattern } = step;
    const patternText = typeof pattern === 'string' ? pattern : pattern.source;
    const { location } = (0, stepConfig_1.getStepConfig)(step) || {};
    const file = location ? (0, paths_1.relativeToCwd)(location.file) : '';
    const locationStr = location ? ` - ${file}:${location.line}` : '';
    return `  ${patternText}${locationStr}`;
}
//# sourceMappingURL=findStep.js.map
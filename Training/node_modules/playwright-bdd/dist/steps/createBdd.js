"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBdd = exports.hasCustomTest = void 0;
const bddFixtures_1 = require("../run/bddFixtures");
const testTypeImpl_1 = require("../playwright/testTypeImpl");
const exit_1 = require("../utils/exit");
const bddWorld_1 = require("../run/bddWorld");
const scenario_1 = require("../hooks/scenario");
const worker_1 = require("../hooks/worker");
const cucumberStyle_1 = require("./cucumberStyle");
const playwrightStyle_1 = require("./playwrightStyle");
/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/ban-types */
// Global flag showing that custom test was passed.
// Used when checking 'importTestFrom' config option.
// todo: https://github.com/vitalets/playwright-bdd/issues/46
exports.hasCustomTest = false;
// eslint-disable-next-line max-statements, complexity
function createBdd(customTest, options) {
    if (options instanceof bddWorld_1.BddWorld) {
        // todo: deprecation warning
    }
    if (!exports.hasCustomTest)
        exports.hasCustomTest = isCustomTest(customTest);
    const BeforeAll = (0, worker_1.workerHookFactory)('beforeAll');
    const AfterAll = (0, worker_1.workerHookFactory)('afterAll');
    // new cucumber-style
    if (options && 'worldFixture' in options && options.worldFixture) {
        if (!exports.hasCustomTest) {
            (0, exit_1.exit)(`When using worldFixture, you should provide custom test to createBdd()`);
        }
        const Given = (0, cucumberStyle_1.cucumberStepCtor)('Given', options.worldFixture);
        const When = (0, cucumberStyle_1.cucumberStepCtor)('When', options.worldFixture);
        const Then = (0, cucumberStyle_1.cucumberStepCtor)('Then', options.worldFixture);
        const Step = (0, cucumberStyle_1.cucumberStepCtor)('Unknown', options.worldFixture);
        const Before = (0, scenario_1.scenarioHookFactory)('before', { useWorldFixture: true });
        const After = (0, scenario_1.scenarioHookFactory)('after', { useWorldFixture: true });
        return { Given, When, Then, Step, Before, After, BeforeAll, AfterAll };
    }
    const Given = (0, playwrightStyle_1.playwrightStepCtor)('Given', exports.hasCustomTest);
    const When = (0, playwrightStyle_1.playwrightStepCtor)('When', exports.hasCustomTest);
    const Then = (0, playwrightStyle_1.playwrightStepCtor)('Then', exports.hasCustomTest);
    const Step = (0, playwrightStyle_1.playwrightStepCtor)('Unknown', exports.hasCustomTest);
    const Before = (0, scenario_1.scenarioHookFactory)('before');
    const After = (0, scenario_1.scenarioHookFactory)('after');
    return { Given, When, Then, Step, Before, After, BeforeAll, AfterAll };
}
exports.createBdd = createBdd;
function isCustomTest(customTest) {
    if (!customTest || customTest === bddFixtures_1.test)
        return false;
    assertTestHasBddFixtures(customTest);
    return true;
}
function assertTestHasBddFixtures(customTest) {
    if (!(0, testTypeImpl_1.isTestContainsSubtest)(customTest, bddFixtures_1.test)) {
        (0, exit_1.exit)(`createBdd() should use 'test' extended from "playwright-bdd"`);
    }
}
//# sourceMappingURL=createBdd.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.appendNewCucumberStyleSteps = exports.cucumberStepCtor = void 0;
const buildStepDefinition_1 = require("../../cucumber/buildStepDefinition");
const getLocationInFile_1 = require("../../playwright/getLocationInFile");
const stepConfigs = [];
function cucumberStepCtor(keyword, worldFixture) {
    return (pattern, fn) => {
        stepConfigs.push({
            keyword,
            pattern,
            fn,
            hasCustomTest: true,
            location: (0, getLocationInFile_1.getLocationByOffset)(3),
            worldFixture,
        });
        // returns function to be able to call this step from other steps
        // see: https://github.com/vitalets/playwright-bdd/issues/110
        // Note: for new cucumber style we should call this fn with current world (add to docs)
        return fn;
    };
}
exports.cucumberStepCtor = cucumberStepCtor;
/**
 * Append steps to Cucumber's supportCodeLibrary.
 */
function appendNewCucumberStyleSteps(supportCodeLibrary) {
    stepConfigs.forEach((stepConfig) => {
        const { keyword, pattern } = stepConfig;
        const code = buildCucumberStepFnWithNewStyleWorld(stepConfig);
        const { file: uri, line } = stepConfig.location;
        const stepDefinition = (0, buildStepDefinition_1.buildStepDefinition)({
            keyword,
            pattern,
            code,
            uri,
            line,
            options: {}, // not used in playwright-bdd
        }, supportCodeLibrary);
        supportCodeLibrary.stepDefinitions.push(stepDefinition);
    });
    stepConfigs.length = 0;
}
exports.appendNewCucumberStyleSteps = appendNewCucumberStyleSteps;
function buildCucumberStepFnWithNewStyleWorld(stepConfig) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const code = function (...args) {
        const world = this.$internal.newCucumberStyleWorld;
        return stepConfig.fn.call(world, ...args);
    };
    // attach stepConfig to fn for easier access later
    code.stepConfig = stepConfig;
    return code;
}
//# sourceMappingURL=index.js.map
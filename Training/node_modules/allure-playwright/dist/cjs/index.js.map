{"version":3,"file":"index.js","names":["_nodeFs","require","_nodeOs","_interopRequireDefault","_nodePath","_nodeProcess","_allureJsCommons","_sdk","_reporter","_legacy","_utils","_test","e","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","_regeneratorRuntime","t","r","Object","n","hasOwnProperty","defineProperty","value","i","a","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_toArray","_arrayWithHoles","_iterableToArray","_nonIterableRest","_toConsumableArray","_arrayWithoutHoles","_nonIterableSpread","_arrayLikeToArray","toString","from","test","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_toPrimitive","toPrimitive","String","Number","diffEndRegexp","stepAttachPrefixLength","AllureReporter","exports","config","process","env","ALLURE_HOST_NAME","os","hostname","Date","Map","options","suiteTitle","detail","onConfigure","testPlan","parseTestPlan","configElement","testsWithSelectors","tests","selector","v1ReporterTests","v2ReporterTests","cliArgs","v2SelectorsArgs","map","replace","escapeRegExp","v1SelectorsArgs","split","concat","onError","onExit","onStdErr","onStdOut","onBegin","suite","writer","testMode","MessageWriter","FileSystemWriter","resultsDir","allureRuntime","ReporterRuntime","onTestBegin","parent","titleMetadata","extractMetadataFromString","title","project","relativeFile","path","relative","testDir","location","file","sep","join","_suite$titlePath","titlePath","_suite$titlePath2","suiteTitles","nameSuites","testCaseIdBase","result","cleanTitle","labels","links","parameters","testCaseId","md5","fullName","line","column","LabelName","LANGUAGE","FRAMEWORK","repeatEach","repeatEachIndex","testUuid","startTest","allureResultsUuids","set","id","startedTestCasesTitlesCache","onStepBegin","_result","step","category","get","startStep","substring","start","startTime","getTime","onStepEnd","updateStep","stepResult","status","error","Status","FAILED","PASSED","stage","Stage","FINISHED","statusDetails","getMessageAndTraceFromError","stopStep","uuid","_onTestEnd","_callee","_this","threadId","thread","_test$parent$titlePat","_test$parent$titlePat2","projectSuiteTitle","fileSuiteTitle","_iterator","_step","attachment","_callee$","_context","parallelIndex","undefined","workerIndex","ALLURE_THREAD_NAME","pid","updateTest","testResult","HOST","THREAD","hasLabel","PARENT_SUITE","SUITE","SUB_SUITE","statusToAllureStats","expectedStatus","attachments","processAttachment","t0","stdout","writeAttachment","Buffer","stripAnsi","contentType","ContentType","TEXT","stderr","mappedLabels","reduce","acc","label","newLabels","flatMap","labelName","labelsGroup","stopTest","writeTest","onTestEnd","_x","_x2","_addSkippedResults","_callee2","_this2","unprocessedCases","_iterator2","_step2","testCase","_callee2$","_context2","allTests","_ref","includes","SKIPPED","duration","errors","retry","steps","globalStartTime","addSkippedResults","_onEnd","_callee3","_callee3$","_context3","writeEnvironmentInfo","writeCategoriesDefinitions","onEnd","printsToStdio","_processAttachment","_callee4","testId","allureRuntimeMessage","message","pathWithoutEnd","actualBase64","expectedBase64","diffBase64","diffName","_callee4$","_context4","body","ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE","JSON","parse","applyRuntimeMessages","existsSync","writeAttachmentFromPath","match","processedDiffs","readImageAsBase64","stringify","expected","actual","diff","IMAGEDIFF","fileExtension","_x3","_x4","version","allure","allurePlaywrightLegacyApi","_default"],"sources":["../../src/index.ts"],"sourcesContent":["import type { FullConfig } from \"@playwright/test\";\nimport type {\n  FullResult,\n  TestResult as PlaywrightTestResult,\n  Suite,\n  TestCase,\n  TestError,\n  TestStep,\n} from \"@playwright/test/reporter\";\nimport { existsSync } from \"node:fs\";\nimport os from \"node:os\";\nimport path from \"node:path\";\nimport process from \"node:process\";\nimport type { ImageDiffAttachment, Label, TestResult } from \"allure-js-commons\";\nimport { ContentType, LabelName, Stage, Status } from \"allure-js-commons\";\nimport type { RuntimeMessage, TestPlanV1Test } from \"allure-js-commons/sdk\";\nimport { extractMetadataFromString, getMessageAndTraceFromError, hasLabel, stripAnsi } from \"allure-js-commons/sdk\";\nimport {\n  ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE,\n  FileSystemWriter,\n  MessageWriter,\n  ReporterRuntime,\n  escapeRegExp,\n  md5,\n  parseTestPlan,\n  readImageAsBase64,\n} from \"allure-js-commons/sdk/reporter\";\nimport { allurePlaywrightLegacyApi } from \"./legacy.js\";\nimport type { AllurePlaywrightReporterConfig } from \"./model.js\";\nimport { statusToAllureStats } from \"./utils.js\";\n\n// TODO: move to utils.ts\nconst diffEndRegexp = /-((expected)|(diff)|(actual))\\.png$/;\n// 12 (allureattach) + 1 (_) + 36 (uuid v4) + 1 (_)\nconst stepAttachPrefixLength = 50;\n\ninterface ReporterV2 {\n  onConfigure(config: FullConfig): void;\n\n  onBegin(suite: Suite): void;\n\n  onTestBegin(test: TestCase, result: PlaywrightTestResult): void;\n\n  onStdOut(chunk: string | Buffer, test?: TestCase, result?: PlaywrightTestResult): void;\n\n  onStdErr(chunk: string | Buffer, test?: TestCase, result?: PlaywrightTestResult): void;\n\n  onTestEnd(test: TestCase, result: PlaywrightTestResult): void;\n\n  onEnd(result: FullResult): Promise<{ status?: FullResult[\"status\"] } | undefined | void> | void;\n\n  onExit(): void | Promise<void>;\n\n  onError(error: TestError): void;\n\n  onStepBegin(test: TestCase, result: PlaywrightTestResult, step: TestStep): void;\n\n  onStepEnd(test: TestCase, result: PlaywrightTestResult, step: TestStep): void;\n\n  printsToStdio(): boolean;\n\n  version(): \"v2\";\n}\n\nexport class AllureReporter implements ReporterV2 {\n  config!: FullConfig;\n  suite!: Suite;\n  options: AllurePlaywrightReporterConfig;\n\n  private allureRuntime: ReporterRuntime | undefined;\n  private hostname: string = process.env.ALLURE_HOST_NAME || os.hostname();\n  private globalStartTime = new Date();\n  private processedDiffs: string[] = [];\n  private readonly startedTestCasesTitlesCache: string[] = [];\n  private readonly allureResultsUuids: Map<string, string> = new Map();\n\n  constructor(config: AllurePlaywrightReporterConfig) {\n    this.options = { suiteTitle: true, detail: true, ...config };\n  }\n\n  onConfigure(config: FullConfig): void {\n    this.config = config;\n\n    const testPlan = parseTestPlan();\n\n    if (!testPlan) {\n      return;\n    }\n\n    // @ts-ignore\n    const configElement = config[Object.getOwnPropertySymbols(config)[0]];\n\n    if (!configElement) {\n      return;\n    }\n\n    const testsWithSelectors = testPlan.tests.filter((test) => test.selector);\n    const v1ReporterTests: TestPlanV1Test[] = [];\n    const v2ReporterTests: TestPlanV1Test[] = [];\n    const cliArgs: string[] = [];\n\n    testsWithSelectors.forEach((test) => {\n      if (!/#/.test(test.selector as string)) {\n        v2ReporterTests.push(test);\n        return;\n      }\n\n      v1ReporterTests.push(test);\n    });\n\n    if (v2ReporterTests.length) {\n      // we need to cut off column because playwright works only with line number\n      const v2SelectorsArgs = v2ReporterTests\n        .map((test) => test.selector.replace(/:\\d+$/, \"\"))\n        .map((selector) => escapeRegExp(selector));\n\n      cliArgs.push(...(v2SelectorsArgs as string[]));\n    }\n\n    if (v1ReporterTests.length) {\n      const v1SelectorsArgs = v1ReporterTests\n        // we can filter tests only by absolute path, so we need to cut off test name\n        .map((test) => test.selector.split(\"#\")[0])\n        .map((selector) => escapeRegExp(selector));\n\n      cliArgs.push(...(v1SelectorsArgs as string[]));\n    }\n\n    if (!cliArgs.length) {\n      return;\n    }\n\n    configElement.cliArgs = cliArgs.map((selector) => `/${selector}`);\n  }\n\n  onError(): void {}\n\n  onExit(): void {}\n\n  onStdErr(): void {}\n\n  onStdOut(): void {}\n\n  onBegin(suite: Suite): void {\n    const writer = this.options.testMode\n      ? new MessageWriter()\n      : new FileSystemWriter({\n          resultsDir: this.options.resultsDir || \"./allure-results\",\n        });\n\n    this.suite = suite;\n    this.allureRuntime = new ReporterRuntime({\n      ...this.options,\n      writer,\n    });\n  }\n\n  onTestBegin(test: TestCase) {\n    const suite = test.parent;\n    const titleMetadata = extractMetadataFromString(test.title);\n    const project = suite.project()!;\n    const relativeFile = path.relative(project?.testDir, test.location.file).split(path.sep).join(\"/\");\n    // root > project > file path > test.describe...\n    const [, , , ...suiteTitles] = suite.titlePath();\n    const nameSuites = suiteTitles.length > 0 ? `${suiteTitles.join(\" \")} ` : \"\";\n    const testCaseIdBase = `${relativeFile}#${nameSuites}${test.title}`;\n    const result: Partial<TestResult> = {\n      name: titleMetadata.cleanTitle,\n      labels: titleMetadata.labels,\n      links: [],\n      parameters: [],\n      testCaseId: md5(testCaseIdBase),\n      fullName: `${relativeFile}:${test.location.line}:${test.location.column}`,\n    };\n\n    result.labels!.push({ name: LabelName.LANGUAGE, value: \"JavaScript\" });\n    result.labels!.push({ name: LabelName.FRAMEWORK, value: \"Playwright\" });\n    result.labels!.push({ name: \"titlePath\", value: suite.titlePath().join(\" > \") });\n\n    if (project?.name) {\n      result.parameters!.push({ name: \"Project\", value: project.name });\n    }\n\n    if (project?.repeatEach > 1) {\n      result.parameters!.push({ name: \"Repetition\", value: `${test.repeatEachIndex + 1}` });\n    }\n\n    const testUuid = this.allureRuntime!.startTest(result);\n\n    this.allureResultsUuids.set(test.id, testUuid as string);\n    this.startedTestCasesTitlesCache.push(titleMetadata.cleanTitle as string);\n  }\n\n  onStepBegin(test: TestCase, _result: PlaywrightTestResult, step: TestStep): void {\n    if (!this.options.detail && step.category !== \"test.step\") {\n      return;\n    }\n\n    // ignore attach steps since attachments are already in the report\n    if (step.category === \"attach\") {\n      return;\n    }\n\n    const testUuid = this.allureResultsUuids.get(test.id)!;\n\n    this.allureRuntime!.startStep(\n      {\n        name: step.title.substring(0, stepAttachPrefixLength),\n        start: step.startTime.getTime(),\n      },\n      testUuid,\n    );\n  }\n\n  onStepEnd(test: TestCase, _result: PlaywrightTestResult, step: TestStep): void {\n    if (!this.options.detail && step.category !== \"test.step\") {\n      return;\n    }\n\n    // ignore attach steps since attachments are already in the report\n    if (step.category === \"attach\") {\n      return;\n    }\n\n    const testUuid = this.allureResultsUuids.get(test.id)!;\n\n    this.allureRuntime!.updateStep((stepResult) => {\n      stepResult.status = step.error ? Status.FAILED : Status.PASSED;\n      stepResult.stage = Stage.FINISHED;\n\n      if (step.error) {\n        stepResult.statusDetails = { ...getMessageAndTraceFromError(step.error) };\n      }\n    }, testUuid);\n    this.allureRuntime!.stopStep({ uuid: testUuid });\n  }\n\n  async onTestEnd(test: TestCase, result: PlaywrightTestResult) {\n    const testUuid = this.allureResultsUuids.get(test.id)!;\n    // We need to check parallelIndex first because pw introduced this field only in v1.30.0\n    const threadId = result.parallelIndex !== undefined ? result.parallelIndex : result.workerIndex;\n    const thread: string =\n      process.env.ALLURE_THREAD_NAME || `${this.hostname}-${process.pid}-playwright-worker-${threadId}`;\n    const error = result.error;\n    // only apply default suites if not set by user\n    const [, projectSuiteTitle, fileSuiteTitle, ...suiteTitles] = test.parent.titlePath();\n\n    this.allureRuntime!.updateTest((testResult) => {\n      testResult.labels.push({ name: LabelName.HOST, value: this.hostname });\n      testResult.labels.push({ name: LabelName.THREAD, value: thread });\n\n      if (projectSuiteTitle && !hasLabel(testResult as TestResult, LabelName.PARENT_SUITE)) {\n        testResult.labels.push({ name: LabelName.PARENT_SUITE, value: projectSuiteTitle });\n      }\n\n      if (this.options.suiteTitle && fileSuiteTitle && !hasLabel(testResult as TestResult, LabelName.SUITE)) {\n        testResult.labels.push({ name: LabelName.SUITE, value: fileSuiteTitle });\n      }\n\n      if (suiteTitles.length > 0 && !hasLabel(testResult as TestResult, LabelName.SUB_SUITE)) {\n        testResult.labels.push({ name: LabelName.SUB_SUITE, value: suiteTitles.join(\" > \") });\n      }\n\n      if (error) {\n        testResult.statusDetails = { ...getMessageAndTraceFromError(error) };\n      }\n\n      testResult.status = statusToAllureStats(result.status, test.expectedStatus);\n      testResult.stage = Stage.FINISHED;\n    }, testUuid);\n\n    for (const attachment of result.attachments) {\n      await this.processAttachment(test.id, attachment);\n    }\n\n    if (result.stdout.length > 0) {\n      this.allureRuntime!.writeAttachment(\n        \"stdout\",\n        Buffer.from(stripAnsi(result.stdout.join(\"\")) as string, \"utf-8\"),\n        {\n          contentType: ContentType.TEXT,\n        },\n        testUuid,\n      );\n    }\n\n    if (result.stderr.length > 0) {\n      this.allureRuntime!.writeAttachment(\n        \"stderr\",\n        Buffer.from(stripAnsi(result.stderr.join(\"\")) as string, \"utf-8\"),\n        {\n          contentType: ContentType.TEXT,\n        },\n        testUuid,\n      );\n    }\n\n    // FIXME: temp logic for labels override, we need it here to keep the reporter compatible with v2 API\n    // in next iterations we need to implement the logic for every javascript integration\n    this.allureRuntime!.updateTest((testResult) => {\n      const mappedLabels = testResult.labels.reduce<Record<string, Label[]>>((acc, label) => {\n        if (!acc[label.name]) {\n          acc[label.name] = [];\n        }\n\n        acc[label.name].push(label);\n\n        return acc;\n      }, {});\n      const newLabels = Object.keys(mappedLabels as Record<string, Label[]>).flatMap((labelName) => {\n        const labelsGroup = mappedLabels[labelName];\n\n        if (\n          labelName === LabelName.SUITE ||\n          labelName === LabelName.PARENT_SUITE ||\n          labelName === LabelName.SUB_SUITE\n        ) {\n          return labelsGroup.slice(-1);\n        }\n\n        return labelsGroup;\n      });\n\n      testResult.labels = newLabels;\n    }, testUuid);\n\n    this.allureRuntime!.stopTest({ uuid: testUuid });\n    this.allureRuntime!.writeTest(testUuid);\n  }\n\n  async addSkippedResults() {\n    const unprocessedCases = this.suite.allTests().filter(({ title }) => {\n      const titleMetadata = extractMetadataFromString(title);\n\n      return !this.startedTestCasesTitlesCache.includes(titleMetadata.cleanTitle as string);\n    });\n\n    for (const testCase of unprocessedCases) {\n      this.onTestBegin(testCase);\n      await this.onTestEnd(testCase, {\n        status: Status.SKIPPED,\n        attachments: [],\n        duration: 0,\n        errors: [],\n        parallelIndex: 0,\n        workerIndex: 0,\n        retry: 0,\n        steps: [],\n        stderr: [],\n        stdout: [],\n        startTime: this.globalStartTime,\n      });\n    }\n  }\n\n  async onEnd() {\n    await this.addSkippedResults();\n\n    this.allureRuntime!.writeEnvironmentInfo();\n    this.allureRuntime!.writeCategoriesDefinitions();\n  }\n\n  printsToStdio(): boolean {\n    return false;\n  }\n\n  private async processAttachment(\n    testId: string,\n    attachment: {\n      name: string;\n      contentType: string;\n      path?: string;\n      body?: Buffer;\n    },\n  ) {\n    const testUuid = this.allureResultsUuids.get(testId)!;\n\n    if (!attachment.body && !attachment.path) {\n      return;\n    }\n\n    const allureRuntimeMessage = attachment.contentType === ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE;\n\n    if (allureRuntimeMessage && !attachment.body) {\n      return;\n    }\n\n    if (allureRuntimeMessage) {\n      const message = JSON.parse(attachment.body!.toString()) as RuntimeMessage;\n\n      // TODO: make possible to pass single message and list of them\n      this.allureRuntime!.applyRuntimeMessages([message], { testUuid });\n      return;\n    }\n\n    if (attachment.body) {\n      this.allureRuntime!.writeAttachment(\n        attachment.name,\n        attachment.body,\n        {\n          contentType: attachment.contentType,\n        },\n        testUuid,\n      );\n    } else if (!existsSync(attachment.path!)) {\n      return;\n    } else {\n      this.allureRuntime!.writeAttachmentFromPath(\n        attachment.name,\n        attachment.path!,\n        {\n          contentType: attachment.contentType,\n        },\n        testUuid,\n      );\n    }\n\n    if (!attachment.name.match(diffEndRegexp)) {\n      return;\n    }\n\n    const pathWithoutEnd = attachment.path!.replace(diffEndRegexp, \"\");\n\n    if (this.processedDiffs.includes(pathWithoutEnd)) {\n      return;\n    }\n\n    const actualBase64 = await readImageAsBase64(`${pathWithoutEnd}-actual.png`);\n    const expectedBase64 = await readImageAsBase64(`${pathWithoutEnd}-expected.png`);\n    const diffBase64 = await readImageAsBase64(`${pathWithoutEnd}-diff.png`);\n    const diffName = attachment.name.replace(diffEndRegexp, \"\");\n\n    this.allureRuntime!.writeAttachment(\n      diffName,\n      Buffer.from(\n        JSON.stringify({\n          expected: expectedBase64,\n          actual: actualBase64,\n          diff: diffBase64,\n          name: diffName,\n        } as ImageDiffAttachment),\n        \"utf-8\",\n      ),\n      {\n        contentType: ContentType.IMAGEDIFF,\n        fileExtension: \".imagediff\",\n      },\n      testUuid,\n    );\n\n    this.processedDiffs.push(pathWithoutEnd);\n  }\n\n  version(): \"v2\" {\n    return \"v2\";\n  }\n}\n\n/**\n * @deprecated for removal, import functions directly from \"allure-js-commons\".\n */\nexport const allure = allurePlaywrightLegacyApi;\n\n/**\n * @deprecated for removal, import functions directly from \"@playwright/test\".\n */\nexport { test, expect } from \"@playwright/test\";\n\nexport default AllureReporter;\n"],"mappings":"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","ignoreList":[]}
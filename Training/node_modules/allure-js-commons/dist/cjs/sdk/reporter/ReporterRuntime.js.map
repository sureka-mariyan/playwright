{"version":3,"file":"ReporterRuntime.js","names":["_path","require","_model","_LifecycleState","_Notifier","_StaticAllureContextProvider","_factory","_utils","_attachments","_loader","_excluded","_excluded2","_objectWithoutProperties","e","t","o","r","i","_objectWithoutPropertiesLoose","Object","getOwnPropertySymbols","n","length","indexOf","propertyIsEnumerable","call","hasOwnProperty","ownKeys","keys","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","value","configurable","writable","_toPrimitive","Symbol","toPrimitive","TypeError","String","Number","ReporterRuntime","constructor","_ref","_this","writer","listeners","links","environmentInfo","categories","contextProvider","StaticContextProvider","wrap","MutableAllureContextHolder","LifecycleState","getScope","getFixture","getTest","getStep","testUuid","state","undefined","fixtureUuid","root","stepUuid","uuid","getExecutingItem","getExecutionItem","scopeUuid","opts","startScopeWithUuid","randomUuid","updateFunc","resolvedUuid","console","error","scope","concat","removeScope","stopScope","writeAllFixturesOfScope","removeScopeFromParent","deleteScope","type","fixtureResult","dedicatedScope","tests","scopeObj","resolveScope","wrappedFixture","setFixtureResult","createFixtureResult","start","Date","now","setUpFixtureDedicatedScope","linkFixtureToScope","setFixture","fixture","stop","stopFixtureObj","_ref2","fixtures","wrappedFixtures","map","f","obj","getWrappedFixture","linkFixturesToScope","linkTestsToScope","stopFixture","stage","Stage","FINISHED","writeContainer","removeFixtureFromScope","deleteFixtureResult","result","stateObject","createTestResult","notifier","beforeTestResultStart","resolvedScope","manual","parent","introduceTestIntoScopes","setTestResult","setTest","afterTestResultStart","targetResult","beforeTestResultUpdate","afterTestResultUpdate","_targetResult$testCas","_targetResult$history","beforeTestResultStop","testCaseId","getTestResultTestCaseId","historyId","getTestResultHistoryId","afterTestResultStop","testResult","testResults","get","beforeTestResultWrite","writeResult","removeTest","deleteTestResult","currentScope","writeScope","afterTestResultWrite","parentUuid","addStepToItem","logMissingStepRoot","step","beforeStepStop","deleteStepResult","removeStep","afterStepStop","attachmentName","attachmentContent","options","target","getCurrentExecutingItem","writeAttachmentForItem","attachmentPath","writeEnvironmentInfo","serializedCategories","c","messageRegex","RegExp","source","traceRegex","writeCategoriesDefinitions","_ref3","messages","customHandler","resolvedTestUuid","resolvedFixtureUuid","resolvedRootUuid","getStepRoot","test","targets","rootUuid","message","getCurrentStep","unhandledMessage","handleBuiltInMessage","handleMetadataMessage","handleStepStartMessage","handleStepMetadataMessage","handleStepStopMessage","handleAttachmentContentMessage","handleAttachmentPathMessage","_ref4","_message$data","data","attachments","displayName","parameters","labels","rest","formattedLinks","formatLinks","name","assign","attachmentTarget","_ref5","_ref6","_ref7","_message$data2","status","stopStep","_ref8","item","content","encoding","contentType","fileExtension","wrapInStep","Buffer","from","_ref9","path","attachmentContentOrPath","_options$fileExtensio","wrapInStepAttachment","isPath","extname","attachmentFileName","buildAttachmentFileName","writeAttachmentFromPath","writeAttachment","attachment","steps","newScope","setScope","_this$contextProvider","addScope","parentScope","linkScopes","_scopeUuid","_scope$parent","subScopes","scopeIndex","splice","_ref10","fixtureIndex","child","extraTests","removeFixture","stack","pop","writeFixturesOfScope","_ref11","writtenFixtures","Set","has","add","befores","afters","writeGroup","children","stepResult","createStepResult","setStepResult","addStep","op","link","_this$links","_this$links$find","matcher","find","_ref12","url","startsWith","urlTemplate","replace","nameTemplate","testUuids","curScope","resolveWriter","Notifier","deepClone","exports"],"sources":["../../../../src/sdk/reporter/ReporterRuntime.ts"],"sourcesContent":["/* eslint max-lines: 0 */\nimport { extname } from \"path\";\nimport type { Attachment, AttachmentOptions, FixtureResult, Link, StepResult, TestResult } from \"../../model.js\";\nimport { Stage } from \"../../model.js\";\nimport type {\n  Category,\n  EnvironmentInfo,\n  Messages,\n  RuntimeAttachmentContentMessage,\n  RuntimeAttachmentPathMessage,\n  RuntimeMessage,\n  RuntimeMetadataMessage,\n  RuntimeStartStepMessage,\n  RuntimeStepMetadataMessage,\n  RuntimeStopStepMessage,\n} from \"../types.js\";\nimport { LifecycleState } from \"./LifecycleState.js\";\nimport { Notifier } from \"./Notifier.js\";\nimport { MutableAllureContextHolder, StaticContextProvider } from \"./context/StaticAllureContextProvider.js\";\nimport type { AllureContextProvider } from \"./context/types.js\";\nimport { createFixtureResult, createStepResult, createTestResult } from \"./factory.js\";\nimport type { Config, FixtureType, FixtureWrapper, LinkConfig, TestScope, Writer } from \"./types.js\";\nimport { deepClone, randomUuid } from \"./utils.js\";\nimport { getTestResultHistoryId, getTestResultTestCaseId } from \"./utils.js\";\nimport { buildAttachmentFileName } from \"./utils/attachments.js\";\nimport { resolveWriter } from \"./writer/loader.js\";\n\ntype StartScopeOpts = {\n  /**\n   * If set to `true`, a manual scope will be created. A manual scope doesn't affect\n   * the context. Therefore, tests and fixtures aren't linked to it\n   * automatically.\n   *\n   * Use `linkFixtures`, `updateScope`, or test and fixture start options to fill\n   * such scope with tests and fixtures.\n   */\n  manual?: boolean;\n\n  /**\n   * If set to the UUID of an existing scope, the new scope will be created as its\n   * sub-scope.\n   *\n   * Has an effect only if `manual` is `true`.\n   */\n  parent?: string;\n};\n\ntype StartFixtureOpts = {\n  /**\n   * The UUID of the scope that should be associated with the fixture. Defaults to the current\n   * scope of the context.\n   *\n   * If set to `null`, the fixture won't be attached to any scope (except the\n   * dedicated one in case `dedicatedScope` is `true`).\n   */\n  scope?: string | null;\n\n  /**\n   * If set to `true`, an extra scope will be created to hold the fixture result.\n   * The scope gets the same UUID as the fixture result and isn't pushed into\n   * the context.\n   *\n   * The scope denoted by the `scope` option will serve as the parent.\n   */\n  dedicatedScope?: boolean;\n\n  /**\n   * The UUIDs of tests affected by the fixture. Those tests will be associated\n   * with the fixture's scope.\n   *\n   * If the `scope` option is set to `null`, implicitly sets `dedicatedScope` to `true`.\n   */\n  tests?: string[];\n};\n\ntype StartTestOpts = {\n  /**\n   * The UUID of a scope the test should be associated with. Defaults to the current one.\n   *\n   * If set to `null`, the test won't be associated with any scope (except the\n   * dedicated one in case the `dedicatedScope` option is `true`).\n   */\n  scope?: string | null;\n\n  /**\n   * If set to `true`, an extra scope will be created with the same UUID as the\n   * test result. The test will be attached to that scope.\n   *\n   * The scope denoted by the `scope` option will serve as the parent.\n   */\n  dedicatedScope?: boolean;\n};\n\ntype StopOpts = {\n  /**\n   * The test's or fixture's stop time. Defaults to `Date.now()`.\n   */\n  stop?: number;\n\n  /**\n   * The UUID of a test or fixture to stop.\n   */\n  uuid?: string;\n};\n\ntype LinkFixturesOpts = {\n  /**\n   * The UUIDs of fixtures to associate with the scope or tests.\n   */\n  fixtures?: readonly string[];\n\n  /**\n   * The UUID of a scope to associate with the fixture or tests.\n   */\n  scope?: string;\n\n  /**\n   * The UUIDs of tests to associate with the fixture or scope.\n   */\n  tests?: readonly string[];\n};\n\ntype ApplyMessagesOpts<T> = {\n  fixtureUuid?: string;\n  testUuid?: string;\n  customHandler?: (\n    message: Exclude<Messages<T>, RuntimeMessage>,\n    fixture?: FixtureResult,\n    test?: TestResult,\n    step?: StepResult,\n  ) => void | Promise<void>;\n};\n\ntype MessageTargets = {\n  fixtureUuid: string | undefined;\n  fixture?: FixtureResult;\n  testUuid: string | undefined;\n  test?: TestResult;\n  rootUuid: string;\n  root: TestResult | FixtureResult;\n  step?: StepResult;\n};\n\nexport class ReporterRuntime {\n  private readonly state = new LifecycleState();\n  private notifier: Notifier;\n  private links: LinkConfig[] = [];\n  private contextProvider: AllureContextProvider;\n  writer: Writer;\n  categories?: Category[];\n  environmentInfo?: EnvironmentInfo;\n\n  constructor({\n    writer,\n    listeners = [],\n    links = [],\n    environmentInfo,\n    categories,\n    contextProvider = StaticContextProvider.wrap(new MutableAllureContextHolder()),\n  }: Config) {\n    this.writer = resolveWriter(writer);\n    this.notifier = new Notifier({ listeners });\n    this.links = links;\n    this.categories = categories;\n    this.environmentInfo = environmentInfo;\n    this.contextProvider = contextProvider;\n  }\n\n  hasScope = () => !!this.contextProvider.getScope();\n  hasFixture = () => !!this.contextProvider.getFixture();\n  hasTest = () => !!this.contextProvider.getTest();\n  hasSteps = () => !!this.contextProvider.getStep();\n\n  getCurrentTest = () => {\n    const testUuid = this.contextProvider.getTest();\n    return testUuid ? this.state.getTest(testUuid) : undefined;\n  };\n\n  getCurrentFixture = () => {\n    const fixtureUuid = this.contextProvider.getFixture();\n    return fixtureUuid ? this.state.getFixture(fixtureUuid) : undefined;\n  };\n\n  getCurrentStep = (root?: string) => {\n    const stepUuid = this.contextProvider.getStep(root);\n    return stepUuid ? this.state.getStep(stepUuid) : undefined;\n  };\n\n  getCurrentExecutingItem = (root?: string): FixtureResult | TestResult | StepResult | undefined => {\n    const uuid = this.contextProvider.getExecutingItem(root);\n    return uuid ? this.state.getExecutionItem(uuid) : undefined;\n  };\n\n  getCurrentScope = () => {\n    const scopeUuid = this.contextProvider.getScope();\n    return scopeUuid ? this.state.getScope(scopeUuid) : undefined;\n  };\n\n  /**\n   * Creates a new scope. The scope is pushed into the context unless the `manual`\n   * option is set to `true`.\n   *\n   * @param opts\n   * @returns\n   */\n  startScope = (opts: StartScopeOpts = {}) => this.startScopeWithUuid(randomUuid(), opts);\n\n  updateScope = (updateFunc: (scope: TestScope) => void, uuid?: string) => {\n    const resolvedUuid = uuid ?? this.contextProvider.getScope();\n    if (!resolvedUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"No current scope to update!\");\n      return;\n    }\n\n    const scope = this.state.getScope(resolvedUuid);\n    if (!scope) {\n      // eslint-disable-next-line no-console\n      console.error(`No scope ${resolvedUuid} to update!`);\n      return;\n    }\n\n    updateFunc(scope);\n  };\n\n  /**\n   * Removes a scope from the context. Use `writeScope` to emit its fixtures on disk then.\n   *\n   * If you just want to write the current stop, you may omit the call to this method and\n   * call `writeScope` with no uuid.\n   *\n   * @param uuid The UUID of the scope. If not provided, the current scope will be stopped.\n   *\n   * @returns The UUID of the scope that has been stopped.\n   */\n  stopScope = (uuid?: string) => {\n    const resolvedUuid = uuid ?? this.contextProvider.getScope();\n    if (!resolvedUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"No current scope to stop!\");\n      return;\n    }\n\n    this.contextProvider.removeScope(uuid);\n    return resolvedUuid;\n  };\n\n  /**\n   * Writes all fixtures of a scope on disk.\n   *\n   * @param uuid The UUID of the scope. If not provided, the current scope will\n   * be written and removed from the context. Don't call `stopScope` in that case.\n   */\n  writeScope = (uuid?: string) => {\n    const resolvedUuid = uuid ?? this.stopScope();\n\n    if (!resolvedUuid) {\n      return;\n    }\n\n    const scope = this.state.getScope(resolvedUuid);\n    if (!scope) {\n      // eslint-disable-next-line no-console\n      console.error(`No scope ${resolvedUuid} to write!`);\n      return;\n    }\n\n    this.writeAllFixturesOfScope(scope);\n    this.removeScopeFromParent(scope);\n    this.state.deleteScope(resolvedUuid);\n  };\n\n  /**\n   * Creates a new fixture result and puts it in the context as the current one.\n   *\n   * Use the `scope` parameter to control the fixture's scope. Use `updateScope`\n   * or `linkFixtures` to associate fixtures with tests that can't be linked\n   * automatically.\n   *\n   * Use `stopFixture` once the fixture is completed.\n   *\n   * Use `writeScope` or `writeFixture` to emit fixtures on disk.\n   *\n   * @param type The type of the fixture. It's either `\"before\"` or `\"after\"`.\n   * @param fixtureResult The fixture result data.\n   * @param scope\n   * @param dedicatedScope\n   * @param tests\n   * @returns The UUID of the new fixture.\n   */\n  startFixture = (\n    type: FixtureType,\n    fixtureResult: Partial<FixtureResult>,\n    { scope, dedicatedScope, tests }: StartFixtureOpts = {},\n  ) => {\n    dedicatedScope = dedicatedScope || (scope === null && !!tests);\n    const scopeObj = this.resolveScope(scope);\n    if (scopeObj === undefined) {\n      // eslint-disable-next-line no-console\n      console.error(\"Can't resolve the scope for a new fixture\");\n      return;\n    }\n\n    const uuid = randomUuid();\n    const wrappedFixture = this.state.setFixtureResult(uuid, type, {\n      ...createFixtureResult(),\n      start: Date.now(),\n      ...fixtureResult,\n    });\n\n    if (dedicatedScope || (tests && scopeObj === null)) {\n      this.setUpFixtureDedicatedScope(wrappedFixture, tests, scopeObj);\n    } else if (scopeObj !== null) {\n      this.linkFixtureToScope(wrappedFixture, scopeObj, tests);\n    }\n\n    this.contextProvider.setFixture(uuid);\n    return uuid;\n  };\n\n  updateFixture = (updateFunc: (result: FixtureResult) => void, uuid?: string) => {\n    const resolvedUuid = uuid ?? this.contextProvider.getFixture();\n\n    if (!resolvedUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"No current fixture to update!\");\n      return;\n    }\n\n    const fixture = this.state.getFixture(resolvedUuid);\n\n    if (!fixture) {\n      // eslint-disable-next-line no-console\n      console.error(`No fixture (${resolvedUuid}) to update!`);\n      return;\n    }\n\n    updateFunc(fixture);\n  };\n\n  /**\n   * Stops a fixture and removes it from the context. The fixture result will persist in\n   * the storage until it's written on disk with `writeScope` or `writeFixture`.\n   *\n   * @returns The UUID of the stopped fixture.\n   */\n  stopFixture = ({ uuid, stop }: StopOpts = {}) => {\n    const resolvedUuid = uuid ?? this.contextProvider.getFixture();\n    if (!resolvedUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"No current fixture to stop!\");\n      return;\n    }\n\n    const fixture = this.state.getFixture(resolvedUuid);\n    if (!fixture) {\n      // eslint-disable-next-line no-console\n      console.error(`No fixture (${resolvedUuid}) to stop!`);\n      return;\n    }\n\n    this.stopFixtureObj(fixture, uuid, stop);\n    return resolvedUuid;\n  };\n\n  /**\n   * Use to associate fixtures, scopes, and tests with each other.\n   *\n   * At least two arguments must be provided.\n   */\n  linkFixtures = ({ fixtures = [], scope, tests = [] }: LinkFixturesOpts) => {\n    const wrappedFixtures = fixtures\n      .map((f) => {\n        const obj = this.state.getWrappedFixture(f);\n        if (obj === undefined) {\n          // eslint-disable-next-line no-console\n          console.error(`No fixture (${f}) to link!`);\n        }\n        return obj;\n      })\n      .filter((f) => f) as FixtureWrapper[];\n\n    const scopeObj = scope ? this.state.getScope(scope) : null;\n    if (scopeObj === undefined) {\n      // eslint-disable-next-line no-console\n      console.error(`No scope (${scope!}) to link!`);\n      return;\n    }\n\n    if (wrappedFixtures.length && scopeObj) {\n      this.linkFixturesToScope(wrappedFixtures, scopeObj, tests);\n      return;\n    }\n\n    if (wrappedFixtures.length && tests.length) {\n      for (const fixture of wrappedFixtures) {\n        if (fixture.scope) {\n          this.linkTestsToScope(fixture.scope, tests);\n        } else {\n          this.setUpFixtureDedicatedScope(fixture, tests);\n        }\n      }\n      return;\n    }\n\n    if (scopeObj && tests) {\n      this.linkTestsToScope(scopeObj, tests);\n      return;\n    }\n\n    // eslint-disable-next-line no-console\n    console.error(\"Provide at least two arguments to link!\");\n  };\n\n  /**\n   * Emits a fixture on disk. Calls `stopFixture` prior to that in case the fixture\n   * hasn't been stopped yet. Use this method if you want to manage fixtures manually.\n   * Otherwise, use `writeScope`.\n   *\n   * If called without parameters, implicitly calls `stopFixture`. Make sure you don't call\n   * `stopFixture` by yourself in that case.\n   *\n   * The method has no effect if the fixture isn't associated with at least one test.\n   *\n   * @param uuid The UUID of the fixture. If not provided, the current fixture will\n   * be stopped and emitted. Don't call `stopFixture` in that case.\n   */\n  writeFixture = (uuid?: string) => {\n    const resolvedUuid = uuid ?? this.stopFixture();\n    if (!resolvedUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"Unable to stop the current fixture before write!\");\n      return;\n    }\n\n    const wrappedFixture = this.state.getWrappedFixture(resolvedUuid);\n    if (!wrappedFixture) {\n      // eslint-disable-next-line no-console\n      console.error(`No fixture (${resolvedUuid}) to write!`);\n      return;\n    }\n\n    const fixture = wrappedFixture.value;\n    if (fixture.stage !== Stage.FINISHED) {\n      this.stopFixtureObj(wrappedFixture.value, resolvedUuid);\n    }\n\n    const { scope } = wrappedFixture;\n    if (scope) {\n      this.writeContainer(scope.tests, wrappedFixture);\n      this.removeFixtureFromScope(scope, wrappedFixture);\n    }\n\n    this.state.deleteFixtureResult(resolvedUuid);\n  };\n\n  startTest = (result: Partial<TestResult>, { scope, dedicatedScope }: StartTestOpts = {}) => {\n    const stateObject = this.createTestResult(result);\n    const uuid = stateObject.uuid;\n\n    this.notifier.beforeTestResultStart(stateObject);\n\n    const resolvedScope = dedicatedScope\n      ? this.startScopeWithUuid(uuid, {\n          manual: scope !== undefined,\n          parent: scope ?? undefined,\n        })\n      : scope ?? this.contextProvider.getScope();\n\n    if (resolvedScope) {\n      this.introduceTestIntoScopes(uuid, resolvedScope);\n    }\n\n    this.state.setTestResult(uuid, stateObject);\n    this.contextProvider.setTest(uuid);\n\n    this.notifier.afterTestResultStart(stateObject);\n\n    return uuid;\n  };\n\n  /**\n   * Updates test result by uuid\n   * @example\n   * ```ts\n   * runtime.update(uuid, (result) => {\n   *   // change the result directly, you don't need to return anything\n   *   result.name = \"foo\";\n   * });\n   * ```\n   * @param updateFunc - a function that updates the test result; the result is passed as a single argument and should be mutated to apply the changes\n   * @param uuid - test result uuid\n   */\n  updateTest = (updateFunc: (result: TestResult) => void, uuid?: string) => {\n    const resolvedUuid = uuid ?? this.contextProvider.getTest();\n    if (!resolvedUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"No current test to update!\");\n      return;\n    }\n    const targetResult = this.state.getTest(resolvedUuid);\n\n    if (!targetResult) {\n      // eslint-disable-next-line no-console\n      console.error(`No test (${resolvedUuid}) to update!`);\n      return;\n    }\n\n    this.notifier.beforeTestResultUpdate(targetResult);\n    updateFunc(targetResult);\n    this.notifier.afterTestResultUpdate(targetResult);\n  };\n\n  stopTest = ({ uuid, stop }: StopOpts = {}) => {\n    const resolvedUuid = uuid ?? this.contextProvider.getTest();\n    if (!resolvedUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"No current test to stop!\");\n      return;\n    }\n\n    const targetResult = this.state.getTest(resolvedUuid);\n    if (!targetResult) {\n      // eslint-disable-next-line no-console\n      console.error(`No test (${resolvedUuid}) to stop!`);\n      return;\n    }\n\n    this.notifier.beforeTestResultStop(targetResult);\n    targetResult.testCaseId ??= getTestResultTestCaseId(targetResult);\n    targetResult.historyId ??= getTestResultHistoryId(targetResult);\n    targetResult.stop = stop || Date.now();\n\n    this.notifier.afterTestResultStop(targetResult);\n  };\n\n  /**\n   * Writes a test result on disk and removes it from the storage and the context.\n   * @param uuid The UUID of the test. If not set, the current test result is written.\n   */\n  writeTest = (uuid?: string) => {\n    const resolvedUuid = uuid ?? this.contextProvider.getTest();\n    if (!resolvedUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"No current test to write!\");\n      return;\n    }\n\n    const testResult = this.state.testResults.get(resolvedUuid);\n    if (!testResult) {\n      // eslint-disable-next-line no-console\n      console.error(`No test (${resolvedUuid}) to write!`);\n      return;\n    }\n\n    this.notifier.beforeTestResultWrite(testResult);\n\n    this.writer.writeResult(testResult);\n    this.contextProvider.removeTest(uuid);\n    this.state.deleteTestResult(resolvedUuid);\n\n    const currentScope = this.contextProvider.getScope();\n    if (currentScope === resolvedUuid) {\n      // Writes the scope introduced into the context by `startTest` with\n      // `dedicatedScope` set to `true`.\n      this.writeScope();\n    }\n\n    this.notifier.afterTestResultWrite(testResult);\n  };\n\n  /**\n   * Starts a new step and pushes it into the context.\n   *\n   * @param result Data to be put into the step result object.\n   * @param uuid The UUID of a test or fixture to attach the step to. If not set, the UUID of the current fixture is used.\n   * If no fixture is running, the UUID of the current test is used.\n   *\n   * @returns The UUID of the step.\n   */\n  startStep = (result: Partial<StepResult>, uuid?: string) => {\n    const parentUuid = this.contextProvider.getExecutingItem(uuid);\n    if (!parentUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"No current step, fixture, or test to start a new step!\");\n      return;\n    }\n\n    const parent = this.state.getExecutionItem(parentUuid);\n    if (!parent) {\n      // eslint-disable-next-line no-console\n      console.error(`No execution item (${parentUuid}) to start a step!`);\n      return;\n    }\n\n    return this.addStepToItem(result, uuid, parent);\n  };\n\n  updateStep = (updateFunc: (stepResult: StepResult) => void, uuid?: string) => {\n    const stepUuid = this.contextProvider.getStep(uuid);\n    if (!stepUuid) {\n      this.logMissingStepRoot(uuid, \"update\");\n      return;\n    }\n\n    const step = this.state.getStep(stepUuid)!;\n    if (!step) {\n      // eslint-disable-next-line no-console\n      console.error(`No step ${stepUuid} to update!`);\n      return;\n    }\n\n    updateFunc(step);\n  };\n\n  stopStep = ({ uuid, stop }: StopOpts = {}) => {\n    const stepUuid = this.contextProvider.getStep(uuid);\n    if (!stepUuid) {\n      this.logMissingStepRoot(uuid, \"stop\");\n      return;\n    }\n\n    const step = this.state.getStep(stepUuid);\n    if (!step) {\n      // eslint-disable-next-line no-console\n      console.error(`No step ${stepUuid} to stop!`);\n      return;\n    }\n\n    this.notifier.beforeStepStop(step);\n\n    step.stop = stop ?? Date.now();\n    step.stage = Stage.FINISHED;\n\n    this.state.deleteStepResult(stepUuid);\n    this.contextProvider.removeStep(uuid);\n\n    this.notifier.afterStepStop(step);\n  };\n\n  writeAttachment = (attachmentName: string, attachmentContent: Buffer, options: AttachmentOptions, uuid?: string) => {\n    const target = this.getCurrentExecutingItem(uuid);\n    if (!target) {\n      if (uuid) {\n        // eslint-disable-next-line no-console\n        console.error(`No test or fixture ${uuid} to attach!`);\n      } else {\n        // eslint-disable-next-line no-console\n        console.error(\"No current test or fixture to attach!\");\n      }\n      return;\n    }\n\n    this.writeAttachmentForItem(attachmentName, attachmentContent, options, target);\n  };\n\n  writeAttachmentFromPath = (\n    attachmentName: string,\n    attachmentPath: string,\n    options: AttachmentOptions,\n    uuid?: string,\n  ) => {\n    const target = this.getCurrentExecutingItem(uuid);\n    if (!target) {\n      if (uuid) {\n        // eslint-disable-next-line no-console\n        console.error(`No test or fixture ${uuid} to attach!`);\n      } else {\n        // eslint-disable-next-line no-console\n        console.error(\"No current test or fixture to attach!\");\n      }\n      return;\n    }\n    this.writeAttachmentForItem(attachmentName, attachmentPath, options, target);\n  };\n\n  writeEnvironmentInfo = () => {\n    if (!this.environmentInfo) {\n      return;\n    }\n\n    this.writer.writeEnvironmentInfo(this.environmentInfo);\n  };\n\n  writeCategoriesDefinitions = () => {\n    if (!this.categories) {\n      return;\n    }\n\n    const serializedCategories = this.categories.map((c) => {\n      if (c.messageRegex instanceof RegExp) {\n        c.messageRegex = c.messageRegex.source;\n      }\n\n      if (c.traceRegex instanceof RegExp) {\n        c.traceRegex = c.traceRegex.source;\n      }\n\n      return c;\n    });\n\n    this.writer.writeCategoriesDefinitions(serializedCategories);\n  };\n\n  applyRuntimeMessages = <T>(\n    messages: Messages<T>[] = [],\n    { testUuid, fixtureUuid, customHandler }: ApplyMessagesOpts<T> = {},\n  ) => {\n    const resolvedTestUuid = testUuid ?? this.contextProvider.getTest();\n    const resolvedFixtureUuid = fixtureUuid ?? this.contextProvider.getFixture();\n    const resolvedRootUuid = resolvedFixtureUuid ?? resolvedTestUuid ?? this.contextProvider.getStepRoot();\n\n    if (!resolvedRootUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"No current fixture or test to apply runtime messages to!\");\n      return;\n    }\n\n    const fixture = resolvedFixtureUuid ? this.state.getFixture(resolvedFixtureUuid) : undefined;\n    const test = resolvedTestUuid ? this.state.getTest(resolvedTestUuid) : undefined;\n    const root = fixture ?? test;\n\n    if (!root) {\n      // eslint-disable-next-line no-console\n      console.error(`No fixture or test (${resolvedRootUuid}) to apply runtime messages to!`);\n      return;\n    }\n\n    const targets: MessageTargets = {\n      fixtureUuid: resolvedFixtureUuid ?? undefined,\n      fixture,\n      testUuid: resolvedTestUuid ?? undefined,\n      test,\n      rootUuid: resolvedRootUuid,\n      root,\n    };\n\n    for (const message of messages) {\n      const step = this.getCurrentStep(resolvedRootUuid);\n\n      targets.step = step;\n\n      const unhandledMessage = this.handleBuiltInMessage(message, targets);\n\n      if (unhandledMessage && customHandler) {\n        customHandler(unhandledMessage, fixture, test, step);\n      }\n    }\n  };\n\n  protected createTestResult(result: Partial<TestResult>): TestResult {\n    const uuid = randomUuid();\n    return {\n      ...createTestResult(uuid),\n      start: Date.now(),\n      ...deepClone(result),\n    };\n  }\n\n  private handleBuiltInMessage = <T>(message: Messages<T>, targets: MessageTargets) => {\n    switch (message.type) {\n      case \"metadata\":\n        this.handleMetadataMessage(message as RuntimeMetadataMessage, targets);\n        return;\n      case \"step_start\":\n        this.handleStepStartMessage(message as RuntimeStartStepMessage, targets);\n        return;\n      case \"step_metadata\":\n        this.handleStepMetadataMessage(message as RuntimeStepMetadataMessage, targets);\n        return;\n      case \"step_stop\":\n        this.handleStepStopMessage(message as RuntimeStopStepMessage, targets);\n        return;\n      case \"attachment_content\":\n        this.handleAttachmentContentMessage(message as RuntimeAttachmentContentMessage, targets);\n        return;\n      case \"attachment_path\":\n        this.handleAttachmentPathMessage(message as RuntimeAttachmentPathMessage, targets);\n        return;\n      default:\n        return message as Exclude<Messages<T>, RuntimeMessage>;\n    }\n  };\n\n  private handleMetadataMessage = (message: RuntimeMetadataMessage, { test, root, step }: MessageTargets) => {\n    const { links = [], attachments = [], displayName, parameters = [], labels = [], ...rest } = message.data;\n    const formattedLinks = this.formatLinks(links);\n\n    if (displayName) {\n      root.name = displayName;\n    }\n\n    if (test) {\n      test.links = test.links.concat(formattedLinks);\n      test.labels = test.labels.concat(labels);\n      test.parameters = test.parameters.concat(parameters);\n      Object.assign(test, rest);\n    }\n\n    const attachmentTarget = step || root;\n    attachmentTarget.attachments = attachmentTarget.attachments.concat(attachments);\n  };\n\n  private handleStepStartMessage = (message: RuntimeStartStepMessage, { rootUuid, root, step }: MessageTargets) =>\n    this.addStepToItem({ ...message.data }, rootUuid, step ?? root);\n\n  private handleStepMetadataMessage = (message: RuntimeStepMetadataMessage, { rootUuid, step }: MessageTargets) => {\n    if (!step) {\n      // eslint-disable-next-line no-console\n      console.error(`No current step of ${rootUuid} to apply the metadata`);\n      return;\n    }\n    const { name, parameters } = message.data;\n    if (name) {\n      step.name = name;\n    }\n    if (parameters?.length) {\n      step.parameters = step.parameters.concat(parameters);\n    }\n  };\n\n  private handleStepStopMessage = (message: RuntimeStopStepMessage, { rootUuid, step }: MessageTargets) => {\n    if (!step) {\n      // eslint-disable-next-line no-console\n      console.error(`No current step of ${rootUuid} to stop`);\n      return;\n    }\n\n    const { status, stage, stop, ...rest } = message.data;\n\n    // we should not override the status and stage if they are already set\n    if (step.status === undefined) {\n      step.status = status;\n    }\n\n    if (step.stage === undefined) {\n      step.stage = stage;\n    }\n\n    Object.assign(step, rest);\n\n    this.stopStep({ uuid: rootUuid, stop });\n  };\n\n  private handleAttachmentContentMessage = (\n    message: RuntimeAttachmentContentMessage,\n    { root, step }: MessageTargets,\n  ) => {\n    const item: FixtureResult | TestResult | StepResult = step ?? root;\n    const { name, content, encoding, contentType, fileExtension, wrapInStep } = message.data;\n    this.writeAttachmentForItem(name, Buffer.from(content, encoding), { contentType, fileExtension }, item, wrapInStep);\n  };\n\n  private handleAttachmentPathMessage = (message: RuntimeAttachmentPathMessage, { root, step }: MessageTargets) => {\n    const item: FixtureResult | TestResult | StepResult = step ?? root;\n    const { name, path, contentType, fileExtension, wrapInStep } = message.data;\n    this.writeAttachmentForItem(name, path, { contentType, fileExtension }, item, wrapInStep);\n  };\n\n  private writeAttachmentForItem = (\n    attachmentName: string,\n    attachmentContentOrPath: Buffer | string,\n    options: Pick<AttachmentOptions, \"fileExtension\" | \"contentType\">,\n    item: StepResult | TestResult | FixtureResult,\n    wrapInStepAttachment: boolean = false,\n  ) => {\n    const isPath = typeof attachmentContentOrPath === \"string\";\n    const fileExtension = options.fileExtension ?? (isPath ? extname(attachmentContentOrPath) : undefined);\n    const attachmentFileName = buildAttachmentFileName({ contentType: options.contentType, fileExtension });\n\n    if (isPath) {\n      this.writer.writeAttachmentFromPath(attachmentFileName, attachmentContentOrPath);\n    } else {\n      this.writer.writeAttachment(attachmentFileName, attachmentContentOrPath);\n    }\n\n    const attachment: Attachment = {\n      name: attachmentName,\n      source: attachmentFileName,\n      type: options.contentType,\n    };\n\n    if (wrapInStepAttachment) {\n      item.steps.push({ name: attachmentName, attachments: [attachment] } as StepResult);\n    } else {\n      item.attachments.push(attachment);\n    }\n  };\n\n  private startScopeWithUuid = (uuid: string, { manual, parent }: StartScopeOpts = {}) => {\n    const newScope = this.state.setScope(uuid);\n\n    if (!manual) {\n      parent = this.contextProvider.getScope() ?? undefined;\n      this.contextProvider.addScope(uuid);\n    }\n    if (parent) {\n      const parentScope = this.state.getScope(parent);\n      if (parentScope) {\n        this.linkScopes(parentScope, newScope);\n      }\n    }\n    return uuid;\n  };\n\n  private resolveScope = (scopeUuid: string | undefined | null) => {\n    if (scopeUuid === null) {\n      return null;\n    }\n    scopeUuid = scopeUuid ?? this.contextProvider.getScope();\n    return scopeUuid ? this.state.getScope(scopeUuid) : null;\n  };\n\n  private removeScopeFromParent = (scope: TestScope) => {\n    const { subScopes } = scope.parent ?? {};\n    if (subScopes) {\n      const scopeIndex = subScopes.indexOf(scope);\n      if (scopeIndex !== -1) {\n        subScopes.splice(scopeIndex, 1);\n      }\n    }\n  };\n\n  private removeFixtureFromScope = ({ fixtures }: TestScope, wrappedFixture: FixtureWrapper) => {\n    const fixtureIndex = fixtures.indexOf(wrappedFixture);\n    if (fixtureIndex !== -1) {\n      fixtures.splice(fixtureIndex, 1);\n    }\n  };\n\n  private setUpFixtureDedicatedScope = (\n    wrappedFixture: FixtureWrapper,\n    tests: readonly string[] | undefined,\n    parentScope?: TestScope | null,\n  ) => {\n    const scope = this.state.setScope(wrappedFixture.uuid, {\n      fixtures: [wrappedFixture],\n      tests: [...(tests ?? [])],\n    });\n    wrappedFixture.scope = scope;\n    if (parentScope) {\n      this.linkScopes(parentScope, scope);\n    }\n  };\n\n  private linkScopes = (parent: TestScope, child: TestScope) => {\n    child.parent = parent;\n    parent.subScopes.push(child);\n  };\n\n  private linkFixturesToScope = (\n    wrappedFixtures: readonly FixtureWrapper[],\n    scope: TestScope,\n    extraTests: readonly string[] | undefined,\n  ) => {\n    for (const fixture of wrappedFixtures) {\n      this.linkFixtureToScope(fixture, scope, extraTests);\n    }\n  };\n\n  private linkFixtureToScope = (\n    wrappedFixture: FixtureWrapper,\n    scope: TestScope,\n    extraTests: readonly string[] | undefined,\n  ) => {\n    if (wrappedFixture.scope) {\n      const fixtureIndex = wrappedFixture.scope.fixtures.indexOf(wrappedFixture);\n      if (fixtureIndex !== -1) {\n        wrappedFixture.scope.fixtures.splice(fixtureIndex, 1);\n      }\n    }\n\n    wrappedFixture.scope = scope;\n    scope.fixtures.push(wrappedFixture);\n    if (extraTests) {\n      this.linkTestsToScope(scope, extraTests);\n    }\n  };\n\n  private stopFixtureObj = (fixture: FixtureResult, uuid?: string, stop?: number) => {\n    fixture.stop = stop ?? Date.now();\n    fixture.stage = Stage.FINISHED;\n\n    this.contextProvider.removeFixture(uuid);\n  };\n\n  private writeAllFixturesOfScope = (root: TestScope) => {\n    const stack = [root];\n    for (let scope = stack.pop(); scope; scope = stack.pop()) {\n      this.writeFixturesOfScope(scope);\n      this.state.deleteScope(scope.uuid);\n    }\n  };\n\n  private writeFixturesOfScope = ({ fixtures, tests }: TestScope) => {\n    const writtenFixtures = new Set<string>();\n    if (tests.length) {\n      for (const wrappedFixture of fixtures) {\n        if (!writtenFixtures.has(wrappedFixture.uuid)) {\n          this.writeContainer(tests, wrappedFixture);\n          this.state.deleteFixtureResult(wrappedFixture.uuid);\n          writtenFixtures.add(wrappedFixture.uuid);\n        }\n      }\n    }\n  };\n\n  private writeContainer = (tests: string[], wrappedFixture: FixtureWrapper) => {\n    const fixture = wrappedFixture.value;\n    const befores = wrappedFixture.type === \"before\" ? [wrappedFixture.value] : [];\n    const afters = wrappedFixture.type === \"after\" ? [wrappedFixture.value] : [];\n    this.writer.writeGroup({\n      uuid: randomUuid(),\n      name: fixture.name,\n      children: [...new Set(tests)],\n      befores,\n      afters,\n    });\n  };\n\n  private addStepToItem = (\n    data: Partial<StepResult>,\n    rootUuid: string | undefined,\n    parent: StepResult | TestResult | FixtureResult,\n  ) => {\n    const stepResult: StepResult = {\n      ...createStepResult(),\n      start: Date.now(),\n      ...data,\n    };\n    parent.steps.push(stepResult);\n    const stepUuid = randomUuid();\n    this.state.setStepResult(stepUuid, stepResult);\n\n    this.contextProvider.addStep(stepUuid, rootUuid);\n\n    return stepUuid;\n  };\n\n  private logMissingStepRoot = (uuid: string | undefined, op: string) => {\n    if (uuid) {\n      // eslint-disable-next-line no-console\n      console.error(`No test or fixture of (${uuid}) to ${op} the step!`);\n    } else {\n      // eslint-disable-next-line no-console\n      console.error(`No current step to ${op}!`);\n    }\n  };\n\n  private formatLinks = (links: Link[]) => {\n    if (!this.links.length) {\n      return links;\n    }\n\n    return links.map((link) => {\n      // TODO:\n      // @ts-ignore\n      const matcher = this.links?.find?.(({ type }) => type === link.type);\n\n      // TODO:\n      if (!matcher || link.url.startsWith(\"http\")) {\n        return link;\n      }\n\n      const url = matcher.urlTemplate.replace(\"%s\", link.url);\n\n      // we shouldn't need to reassign already assigned name\n      if (link.name || !matcher.nameTemplate) {\n        return {\n          ...link,\n          url,\n        };\n      }\n\n      const name = matcher.nameTemplate.replace(\"%s\", link.url);\n\n      return {\n        ...link,\n        name,\n        url,\n      };\n    });\n  };\n\n  private introduceTestIntoScopes = (testUuid: string, scopeUuid: string) => {\n    const scope = this.state.getScope(scopeUuid);\n    if (!scope) {\n      // eslint-disable-next-line no-console\n      console.error(`No scope ${scopeUuid} to introduce the test into`);\n      return;\n    }\n\n    this.linkTestsToScope(scope, [testUuid]);\n  };\n\n  private linkTestsToScope = (scope: TestScope, testUuids: readonly string[]) => {\n    for (let curScope: TestScope | undefined = scope; curScope; curScope = curScope.parent) {\n      curScope.tests.splice(curScope.tests.length, 0, ...testUuids);\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]}
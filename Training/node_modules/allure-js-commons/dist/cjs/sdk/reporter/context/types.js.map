{"version":3,"file":"types.js","names":[],"sources":["../../../../../src/sdk/reporter/context/types.ts"],"sourcesContent":["/**\n * Represents a snapshot of the Allure state at some particular moment during the run.\n */\nexport type AllureContext = {\n  getScope: () => string | null;\n  getFixture: () => string | null;\n  getTest: () => string | null;\n  getStep: (root: string) => string | null;\n};\n\n/**\n * Implements the transitions from one snapshot to another.\n */\nexport type AllureContextHolder<TContext extends AllureContext> = {\n  get: () => TContext;\n\n  addScope: (uuid: string) => void;\n  removeScope: () => void;\n  removeScopeByUuid: (uuid: string) => void;\n\n  setFixture: (uuid: string) => void;\n  removeFixture: () => void;\n\n  setTest: (uuid: string) => void;\n  removeTest: () => void;\n\n  addStep: (root: string, uuid: string) => void;\n  removeStep: (root: string) => void;\n};\n\n/**\n * Provides the set of methods to access and update the context.\n */\nexport type AllureContextProvider = {\n  getScope: () => string | null;\n  getFixture: () => string | null;\n  getTest: () => string | null;\n  getStepRoot: () => string | null;\n  getStep: (root?: string) => string | null;\n  getExecutingItem: (root?: string) => string | null;\n  addScope: (uuid: string) => void;\n  removeScope: (uuid?: string) => void;\n  setFixture: (uuid: string) => void;\n  removeFixture: (uuid?: string) => void;\n  setTest: (uuid: string) => void;\n  removeTest: (uuid?: string) => void;\n  addStep: (uuid: string, root?: string) => void;\n  removeStep: (root?: string, uuid?: string) => void;\n};\n"],"mappings":"","ignoreList":[]}
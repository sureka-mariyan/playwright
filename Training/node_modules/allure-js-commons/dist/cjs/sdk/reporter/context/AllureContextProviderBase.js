"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AllureContextProviderBase = void 0;
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/* eslint brace-style: 0 */

/**
 * Provides the set of methods to access and update the context.
 * Successor classes are responsible for persisting and accessing the context.
 */
class AllureContextProviderBase {
  constructor() {
    /**
     * Gets the holder that contains the current value of the context.
     */
    _defineProperty(this, "load", void 0);
    /**
     * Persist the changes applied to the context since it was last time persisted.
     */
    _defineProperty(this, "store", void 0);
    _defineProperty(this, "getScope", () => this.getCurrentContext().getScope());
    _defineProperty(this, "getFixture", () => this.getCurrentContext().getFixture());
    _defineProperty(this, "getTest", () => this.getCurrentContext().getTest());
    _defineProperty(this, "getStepRoot", () => {
      var _this$getFixture;
      return (_this$getFixture = this.getFixture()) !== null && _this$getFixture !== void 0 ? _this$getFixture : this.getTest();
    });
    _defineProperty(this, "getStep", root => {
      var resolvedRoot = root !== null && root !== void 0 ? root : this.getStepRoot();
      if (resolvedRoot) {
        return this.getCurrentContext().getStep(resolvedRoot);
      }
      return null;
    });
    _defineProperty(this, "getExecutingItem", root => {
      var resolvedRoot = root !== null && root !== void 0 ? root : this.getStepRoot();
      if (resolvedRoot) {
        var _this$getStep;
        return (_this$getStep = this.getStep(resolvedRoot)) !== null && _this$getStep !== void 0 ? _this$getStep : resolvedRoot;
      }
      return null;
    });
    _defineProperty(this, "addScope", uuid => this.update(b => b.addScope(uuid)));
    _defineProperty(this, "removeScope", uuid => this.update(b => uuid ? b.removeScopeByUuid(uuid) : b.removeScope()));
    _defineProperty(this, "setFixture", uuid => this.update(b => b.setFixture(uuid)));
    _defineProperty(this, "removeFixture", uuid => {
      if (!uuid || this.getFixture() === uuid) {
        this.update(b => b.removeFixture());
      }
    });
    _defineProperty(this, "setTest", uuid => this.update(b => b.setTest(uuid)));
    _defineProperty(this, "removeTest", uuid => {
      if (!uuid || this.getTest() === uuid) {
        this.update(b => b.removeTest());
      }
    });
    _defineProperty(this, "addStep", (uuid, root) => {
      var resolvedRoot = root !== null && root !== void 0 ? root : this.getStepRoot();
      if (resolvedRoot) {
        this.update(b => b.addStep(resolvedRoot, uuid));
      }
    });
    _defineProperty(this, "removeStep", root => {
      var resolvedRoot = root !== null && root !== void 0 ? root : this.getStepRoot();
      if (resolvedRoot) {
        this.update(b => b.removeStep(resolvedRoot));
      }
    });
    _defineProperty(this, "getCurrentContext", () => this.load().get());
    _defineProperty(this, "update", fn => {
      var holder = this.load();
      fn(holder);
      this.store(holder);
    });
  }
}
exports.AllureContextProviderBase = AllureContextProviderBase;
//# sourceMappingURL=AllureContextProviderBase.js.map
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageReader = void 0;
var _utils = require("../utils.js");
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var parseJsonResult = data => {
  return JSON.parse(Buffer.from(data, "base64").toString("utf-8"));
};
class MessageReader {
  constructor() {
    _defineProperty(this, "results", {
      tests: [],
      groups: [],
      attachments: {}
    });
    _defineProperty(this, "handleMessage", jsonMessage => {
      var {
        path,
        type = "undefined",
        data
      } = JSON.parse(jsonMessage);
      switch (type) {
        case "container":
          this.results.groups.push(parseJsonResult(data));
          return;
        case "result":
          this.results.tests.push(parseJsonResult(data));
          return;
        case "attachment":
          this.results.attachments[path] = data;
          return;
        case "misc":
          switch (path) {
            case "environment.properties":
              this.results.envInfo = (0, _utils.parseProperties)(Buffer.from(data, "base64").toString());
              break;
            case "categories.json":
              this.results.categories = parseJsonResult(data);
              break;
            default:
              break;
          }
          return;
        default:
          return;
      }
    });
  }
}
exports.MessageReader = MessageReader;
//# sourceMappingURL=MessageReader.js.map
{"version":3,"file":"MessageReader.js","names":["_utils","require","_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","parseJsonResult","data","JSON","parse","Buffer","from","toString","MessageReader","constructor","tests","groups","attachments","jsonMessage","path","type","results","push","envInfo","parseProperties","categories","exports"],"sources":["../../../../../src/sdk/reporter/writer/MessageReader.ts"],"sourcesContent":["import type { TestResult, TestResultContainer } from \"../../../model.js\";\nimport type { AllureResults, EnvironmentInfo } from \"../../types.js\";\nimport { parseProperties } from \"../utils.js\";\n\nconst parseJsonResult = <T>(data: string) => {\n  return JSON.parse(Buffer.from(data, \"base64\").toString(\"utf-8\")) as T;\n};\n\nexport class MessageReader {\n  readonly results: AllureResults = {\n    tests: [],\n    groups: [],\n    attachments: {},\n  };\n\n  handleMessage = (jsonMessage: string) => {\n    const { path, type = \"undefined\", data }: { path: string; type?: string; data: string } = JSON.parse(jsonMessage);\n\n    switch (type) {\n      case \"container\":\n        this.results.groups.push(parseJsonResult<TestResultContainer>(data));\n        return;\n      case \"result\":\n        this.results.tests.push(parseJsonResult<TestResult>(data));\n        return;\n      case \"attachment\":\n        this.results.attachments[path] = data;\n        return;\n      case \"misc\":\n        switch (path) {\n          case \"environment.properties\":\n            this.results.envInfo = parseProperties(Buffer.from(data, \"base64\").toString()) as EnvironmentInfo;\n            break;\n          case \"categories.json\":\n            this.results.categories = parseJsonResult(data);\n            break;\n          default:\n            break;\n        }\n        return;\n      default:\n        return;\n    }\n  };\n}\n"],"mappings":";;;;;;AAEA,IAAAA,MAAA,GAAAC,OAAA;AAA8C,SAAAC,gBAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,YAAAD,CAAA,GAAAE,cAAA,CAAAF,CAAA,MAAAD,CAAA,GAAAI,MAAA,CAAAC,cAAA,CAAAL,CAAA,EAAAC,CAAA,IAAAK,KAAA,EAAAJ,CAAA,EAAAK,UAAA,MAAAC,YAAA,MAAAC,QAAA,UAAAT,CAAA,CAAAC,CAAA,IAAAC,CAAA,EAAAF,CAAA;AAAA,SAAAG,eAAAD,CAAA,QAAAQ,CAAA,GAAAC,YAAA,CAAAT,CAAA,uCAAAQ,CAAA,GAAAA,CAAA,GAAAA,CAAA;AAAA,SAAAC,aAAAT,CAAA,EAAAD,CAAA,2BAAAC,CAAA,KAAAA,CAAA,SAAAA,CAAA,MAAAF,CAAA,GAAAE,CAAA,CAAAU,MAAA,CAAAC,WAAA,kBAAAb,CAAA,QAAAU,CAAA,GAAAV,CAAA,CAAAc,IAAA,CAAAZ,CAAA,EAAAD,CAAA,uCAAAS,CAAA,SAAAA,CAAA,YAAAK,SAAA,yEAAAd,CAAA,GAAAe,MAAA,GAAAC,MAAA,EAAAf,CAAA;AAE9C,IAAMgB,eAAe,GAAOC,IAAY,IAAK;EAC3C,OAAOC,IAAI,CAACC,KAAK,CAACC,MAAM,CAACC,IAAI,CAACJ,IAAI,EAAE,QAAQ,CAAC,CAACK,QAAQ,CAAC,OAAO,CAAC,CAAC;AAClE,CAAC;AAEM,MAAMC,aAAa,CAAC;EAAAC,YAAA;IAAA3B,eAAA,kBACS;MAChC4B,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,WAAW,EAAE,CAAC;IAChB,CAAC;IAAA9B,eAAA,wBAEgB+B,WAAmB,IAAK;MACvC,IAAM;QAAEC,IAAI;QAAEC,IAAI,GAAG,WAAW;QAAEb;MAAoD,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACS,WAAW,CAAC;MAEjH,QAAQE,IAAI;QACV,KAAK,WAAW;UACd,IAAI,CAACC,OAAO,CAACL,MAAM,CAACM,IAAI,CAAChB,eAAe,CAAsBC,IAAI,CAAC,CAAC;UACpE;QACF,KAAK,QAAQ;UACX,IAAI,CAACc,OAAO,CAACN,KAAK,CAACO,IAAI,CAAChB,eAAe,CAAaC,IAAI,CAAC,CAAC;UAC1D;QACF,KAAK,YAAY;UACf,IAAI,CAACc,OAAO,CAACJ,WAAW,CAACE,IAAI,CAAC,GAAGZ,IAAI;UACrC;QACF,KAAK,MAAM;UACT,QAAQY,IAAI;YACV,KAAK,wBAAwB;cAC3B,IAAI,CAACE,OAAO,CAACE,OAAO,GAAG,IAAAC,sBAAe,EAACd,MAAM,CAACC,IAAI,CAACJ,IAAI,EAAE,QAAQ,CAAC,CAACK,QAAQ,CAAC,CAAC,CAAoB;cACjG;YACF,KAAK,iBAAiB;cACpB,IAAI,CAACS,OAAO,CAACI,UAAU,GAAGnB,eAAe,CAACC,IAAI,CAAC;cAC/C;YACF;cACE;UACJ;UACA;QACF;UACE;MACJ;IACF,CAAC;EAAA;AACH;AAACmB,OAAA,CAAAb,aAAA,GAAAA,aAAA","ignoreList":[]}
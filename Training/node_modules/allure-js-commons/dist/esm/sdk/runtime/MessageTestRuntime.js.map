{"version":3,"file":"MessageTestRuntime.js","names":["Stage","Status","getStatusFromError","MessageTestRuntime","label","name","value","_this","_asyncToGenerator","sendMessage","type","data","labels","_arguments","arguments","_this2","_len","length","Array","_key","link","url","_this3","links","_arguments2","_this4","_len2","_key2","parameter","options","_this5","parameters","_objectSpread","description","markdown","_this6","descriptionHtml","html","_this7","displayName","_this8","historyId","_this9","testCaseId","_this10","attachment","content","_this11","bufferContent","Buffer","from","encoding","toString","contentType","fileExtension","wrapInStep","attachmentFromPath","path","_this12","step","body","_this13","start","Date","now","result","status","PASSED","stage","FINISHED","stop","err","message","stack","statusDetails","trace","stepDisplayName","_this14","stepParameter","mode","_this15"],"sources":["../../../../src/sdk/runtime/MessageTestRuntime.ts"],"sourcesContent":["import type {\n  AttachmentOptions,\n  Label,\n  LabelName,\n  Link,\n  LinkType,\n  ParameterMode,\n  ParameterOptions,\n} from \"../../model.js\";\nimport { Stage, Status } from \"../../model.js\";\nimport type { RuntimeMessage } from \"../types.js\";\nimport { getStatusFromError } from \"../utils.js\";\nimport type { TestRuntime } from \"./types.js\";\n\nexport abstract class MessageTestRuntime implements TestRuntime {\n  async label(name: LabelName | string, value: string) {\n    await this.sendMessage({\n      type: \"metadata\",\n      data: {\n        labels: [{ name, value }],\n      },\n    });\n  }\n\n  async labels(...labels: Label[]) {\n    await this.sendMessage({\n      type: \"metadata\",\n      data: {\n        labels,\n      },\n    });\n  }\n\n  async link(url: string, type?: LinkType | string, name?: string) {\n    await this.sendMessage({\n      type: \"metadata\",\n      data: {\n        links: [{ type, url, name }],\n      },\n    });\n  }\n\n  async links(...links: Link[]) {\n    await this.sendMessage({\n      type: \"metadata\",\n      data: {\n        links,\n      },\n    });\n  }\n\n  async parameter(name: string, value: string, options?: ParameterOptions) {\n    await this.sendMessage({\n      type: \"metadata\",\n      data: {\n        parameters: [\n          {\n            name,\n            value,\n            ...options,\n          },\n        ],\n      },\n    });\n  }\n\n  async description(markdown: string) {\n    await this.sendMessage({\n      type: \"metadata\",\n      data: {\n        description: markdown,\n      },\n    });\n  }\n\n  async descriptionHtml(html: string) {\n    await this.sendMessage({\n      type: \"metadata\",\n      data: {\n        descriptionHtml: html,\n      },\n    });\n  }\n\n  async displayName(name: string) {\n    await this.sendMessage({\n      type: \"metadata\",\n      data: {\n        displayName: name,\n      },\n    });\n  }\n\n  async historyId(value: string) {\n    await this.sendMessage({\n      type: \"metadata\",\n      data: {\n        historyId: value,\n      },\n    });\n  }\n\n  async testCaseId(value: string) {\n    await this.sendMessage({\n      type: \"metadata\",\n      data: {\n        testCaseId: value,\n      },\n    });\n  }\n\n  async attachment(name: string, content: Buffer | string, options: AttachmentOptions) {\n    const bufferContent = typeof content === \"string\" ? Buffer.from(content, options.encoding) : content;\n    await this.sendMessage({\n      type: \"attachment_content\",\n      data: {\n        name,\n        content: bufferContent.toString(\"base64\"),\n        encoding: \"base64\",\n        contentType: options.contentType,\n        fileExtension: options.fileExtension,\n        wrapInStep: true,\n      },\n    });\n  }\n\n  async attachmentFromPath(name: string, path: string, options: AttachmentOptions) {\n    await this.sendMessage({\n      type: \"attachment_path\",\n      data: {\n        name,\n        path,\n        contentType: options.contentType,\n        fileExtension: options.fileExtension,\n        wrapInStep: true,\n      },\n    });\n  }\n\n  async step<T = void>(name: string, body: () => T | PromiseLike<T>) {\n    await this.sendMessage({\n      type: \"step_start\",\n      data: {\n        name,\n        start: Date.now(),\n      },\n    });\n\n    try {\n      const result = await body();\n\n      await this.sendMessage({\n        type: \"step_stop\",\n        data: {\n          status: Status.PASSED,\n          stage: Stage.FINISHED,\n          stop: Date.now(),\n        },\n      });\n\n      return result;\n    } catch (err) {\n      const { message, stack } = err as Error;\n\n      await this.sendMessage({\n        type: \"step_stop\",\n        data: {\n          status: getStatusFromError(err as Error),\n          stage: Stage.FINISHED,\n          stop: Date.now(),\n          statusDetails: {\n            message,\n            trace: stack,\n          },\n        },\n      });\n\n      throw err;\n    }\n  }\n\n  async stepDisplayName(name: string) {\n    await this.sendMessage({\n      type: \"step_metadata\",\n      data: { name },\n    });\n  }\n\n  async stepParameter(name: string, value: string, mode?: ParameterMode) {\n    await this.sendMessage({\n      type: \"step_metadata\",\n      data: {\n        parameters: [{ name, value, mode }],\n      },\n    });\n  }\n\n  abstract sendMessage(message: RuntimeMessage): Promise<void>;\n}\n"],"mappings":"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","ignoreList":[]}
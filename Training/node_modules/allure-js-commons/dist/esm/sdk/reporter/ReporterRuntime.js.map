{"version":3,"file":"ReporterRuntime.js","names":["extname","Stage","LifecycleState","Notifier","MutableAllureContextHolder","StaticContextProvider","createFixtureResult","createStepResult","createTestResult","deepClone","randomUuid","getTestResultHistoryId","getTestResultTestCaseId","buildAttachmentFileName","resolveWriter","ReporterRuntime","constructor","_ref","_this","writer","listeners","links","environmentInfo","categories","contextProvider","wrap","_defineProperty","getScope","getFixture","getTest","getStep","testUuid","state","undefined","fixtureUuid","root","stepUuid","uuid","getExecutingItem","getExecutionItem","scopeUuid","opts","arguments","length","startScopeWithUuid","updateFunc","resolvedUuid","console","error","scope","concat","removeScope","stopScope","writeAllFixturesOfScope","removeScopeFromParent","deleteScope","type","fixtureResult","dedicatedScope","tests","scopeObj","resolveScope","wrappedFixture","setFixtureResult","_objectSpread","start","Date","now","setUpFixtureDedicatedScope","linkFixtureToScope","setFixture","fixture","stop","stopFixtureObj","_ref2","fixtures","wrappedFixtures","map","f","obj","getWrappedFixture","filter","linkFixturesToScope","linkTestsToScope","stopFixture","value","stage","FINISHED","writeContainer","removeFixtureFromScope","deleteFixtureResult","result","stateObject","notifier","beforeTestResultStart","resolvedScope","manual","parent","introduceTestIntoScopes","setTestResult","setTest","afterTestResultStart","targetResult","beforeTestResultUpdate","afterTestResultUpdate","_targetResult$testCas","_targetResult$history","beforeTestResultStop","testCaseId","historyId","afterTestResultStop","testResult","testResults","get","beforeTestResultWrite","writeResult","removeTest","deleteTestResult","currentScope","writeScope","afterTestResultWrite","parentUuid","addStepToItem","logMissingStepRoot","step","beforeStepStop","deleteStepResult","removeStep","afterStepStop","attachmentName","attachmentContent","options","target","getCurrentExecutingItem","writeAttachmentForItem","attachmentPath","writeEnvironmentInfo","serializedCategories","c","messageRegex","RegExp","source","traceRegex","writeCategoriesDefinitions","_ref3","messages","customHandler","resolvedTestUuid","resolvedFixtureUuid","resolvedRootUuid","getStepRoot","test","targets","rootUuid","message","getCurrentStep","unhandledMessage","handleBuiltInMessage","handleMetadataMessage","handleStepStartMessage","handleStepMetadataMessage","handleStepStopMessage","handleAttachmentContentMessage","handleAttachmentPathMessage","_ref4","_message$data","data","attachments","displayName","parameters","labels","rest","_objectWithoutProperties","_excluded","formattedLinks","formatLinks","name","Object","assign","attachmentTarget","_ref5","_ref6","_ref7","_message$data2","status","_excluded2","stopStep","_ref8","item","content","encoding","contentType","fileExtension","wrapInStep","Buffer","from","_ref9","path","attachmentContentOrPath","_options$fileExtensio","wrapInStepAttachment","isPath","attachmentFileName","writeAttachmentFromPath","writeAttachment","attachment","steps","push","newScope","setScope","_this$contextProvider","addScope","parentScope","linkScopes","_scopeUuid","_scope$parent","subScopes","scopeIndex","indexOf","splice","_ref10","fixtureIndex","child","extraTests","removeFixture","stack","pop","writeFixturesOfScope","_ref11","writtenFixtures","Set","has","add","befores","afters","writeGroup","children","stepResult","setStepResult","addStep","op","link","_this$links","_this$links$find","matcher","find","call","_ref12","url","startsWith","urlTemplate","replace","nameTemplate","testUuids","curScope"],"sources":["../../../../src/sdk/reporter/ReporterRuntime.ts"],"sourcesContent":["/* eslint max-lines: 0 */\nimport { extname } from \"path\";\nimport type { Attachment, AttachmentOptions, FixtureResult, Link, StepResult, TestResult } from \"../../model.js\";\nimport { Stage } from \"../../model.js\";\nimport type {\n  Category,\n  EnvironmentInfo,\n  Messages,\n  RuntimeAttachmentContentMessage,\n  RuntimeAttachmentPathMessage,\n  RuntimeMessage,\n  RuntimeMetadataMessage,\n  RuntimeStartStepMessage,\n  RuntimeStepMetadataMessage,\n  RuntimeStopStepMessage,\n} from \"../types.js\";\nimport { LifecycleState } from \"./LifecycleState.js\";\nimport { Notifier } from \"./Notifier.js\";\nimport { MutableAllureContextHolder, StaticContextProvider } from \"./context/StaticAllureContextProvider.js\";\nimport type { AllureContextProvider } from \"./context/types.js\";\nimport { createFixtureResult, createStepResult, createTestResult } from \"./factory.js\";\nimport type { Config, FixtureType, FixtureWrapper, LinkConfig, TestScope, Writer } from \"./types.js\";\nimport { deepClone, randomUuid } from \"./utils.js\";\nimport { getTestResultHistoryId, getTestResultTestCaseId } from \"./utils.js\";\nimport { buildAttachmentFileName } from \"./utils/attachments.js\";\nimport { resolveWriter } from \"./writer/loader.js\";\n\ntype StartScopeOpts = {\n  /**\n   * If set to `true`, a manual scope will be created. A manual scope doesn't affect\n   * the context. Therefore, tests and fixtures aren't linked to it\n   * automatically.\n   *\n   * Use `linkFixtures`, `updateScope`, or test and fixture start options to fill\n   * such scope with tests and fixtures.\n   */\n  manual?: boolean;\n\n  /**\n   * If set to the UUID of an existing scope, the new scope will be created as its\n   * sub-scope.\n   *\n   * Has an effect only if `manual` is `true`.\n   */\n  parent?: string;\n};\n\ntype StartFixtureOpts = {\n  /**\n   * The UUID of the scope that should be associated with the fixture. Defaults to the current\n   * scope of the context.\n   *\n   * If set to `null`, the fixture won't be attached to any scope (except the\n   * dedicated one in case `dedicatedScope` is `true`).\n   */\n  scope?: string | null;\n\n  /**\n   * If set to `true`, an extra scope will be created to hold the fixture result.\n   * The scope gets the same UUID as the fixture result and isn't pushed into\n   * the context.\n   *\n   * The scope denoted by the `scope` option will serve as the parent.\n   */\n  dedicatedScope?: boolean;\n\n  /**\n   * The UUIDs of tests affected by the fixture. Those tests will be associated\n   * with the fixture's scope.\n   *\n   * If the `scope` option is set to `null`, implicitly sets `dedicatedScope` to `true`.\n   */\n  tests?: string[];\n};\n\ntype StartTestOpts = {\n  /**\n   * The UUID of a scope the test should be associated with. Defaults to the current one.\n   *\n   * If set to `null`, the test won't be associated with any scope (except the\n   * dedicated one in case the `dedicatedScope` option is `true`).\n   */\n  scope?: string | null;\n\n  /**\n   * If set to `true`, an extra scope will be created with the same UUID as the\n   * test result. The test will be attached to that scope.\n   *\n   * The scope denoted by the `scope` option will serve as the parent.\n   */\n  dedicatedScope?: boolean;\n};\n\ntype StopOpts = {\n  /**\n   * The test's or fixture's stop time. Defaults to `Date.now()`.\n   */\n  stop?: number;\n\n  /**\n   * The UUID of a test or fixture to stop.\n   */\n  uuid?: string;\n};\n\ntype LinkFixturesOpts = {\n  /**\n   * The UUIDs of fixtures to associate with the scope or tests.\n   */\n  fixtures?: readonly string[];\n\n  /**\n   * The UUID of a scope to associate with the fixture or tests.\n   */\n  scope?: string;\n\n  /**\n   * The UUIDs of tests to associate with the fixture or scope.\n   */\n  tests?: readonly string[];\n};\n\ntype ApplyMessagesOpts<T> = {\n  fixtureUuid?: string;\n  testUuid?: string;\n  customHandler?: (\n    message: Exclude<Messages<T>, RuntimeMessage>,\n    fixture?: FixtureResult,\n    test?: TestResult,\n    step?: StepResult,\n  ) => void | Promise<void>;\n};\n\ntype MessageTargets = {\n  fixtureUuid: string | undefined;\n  fixture?: FixtureResult;\n  testUuid: string | undefined;\n  test?: TestResult;\n  rootUuid: string;\n  root: TestResult | FixtureResult;\n  step?: StepResult;\n};\n\nexport class ReporterRuntime {\n  private readonly state = new LifecycleState();\n  private notifier: Notifier;\n  private links: LinkConfig[] = [];\n  private contextProvider: AllureContextProvider;\n  writer: Writer;\n  categories?: Category[];\n  environmentInfo?: EnvironmentInfo;\n\n  constructor({\n    writer,\n    listeners = [],\n    links = [],\n    environmentInfo,\n    categories,\n    contextProvider = StaticContextProvider.wrap(new MutableAllureContextHolder()),\n  }: Config) {\n    this.writer = resolveWriter(writer);\n    this.notifier = new Notifier({ listeners });\n    this.links = links;\n    this.categories = categories;\n    this.environmentInfo = environmentInfo;\n    this.contextProvider = contextProvider;\n  }\n\n  hasScope = () => !!this.contextProvider.getScope();\n  hasFixture = () => !!this.contextProvider.getFixture();\n  hasTest = () => !!this.contextProvider.getTest();\n  hasSteps = () => !!this.contextProvider.getStep();\n\n  getCurrentTest = () => {\n    const testUuid = this.contextProvider.getTest();\n    return testUuid ? this.state.getTest(testUuid) : undefined;\n  };\n\n  getCurrentFixture = () => {\n    const fixtureUuid = this.contextProvider.getFixture();\n    return fixtureUuid ? this.state.getFixture(fixtureUuid) : undefined;\n  };\n\n  getCurrentStep = (root?: string) => {\n    const stepUuid = this.contextProvider.getStep(root);\n    return stepUuid ? this.state.getStep(stepUuid) : undefined;\n  };\n\n  getCurrentExecutingItem = (root?: string): FixtureResult | TestResult | StepResult | undefined => {\n    const uuid = this.contextProvider.getExecutingItem(root);\n    return uuid ? this.state.getExecutionItem(uuid) : undefined;\n  };\n\n  getCurrentScope = () => {\n    const scopeUuid = this.contextProvider.getScope();\n    return scopeUuid ? this.state.getScope(scopeUuid) : undefined;\n  };\n\n  /**\n   * Creates a new scope. The scope is pushed into the context unless the `manual`\n   * option is set to `true`.\n   *\n   * @param opts\n   * @returns\n   */\n  startScope = (opts: StartScopeOpts = {}) => this.startScopeWithUuid(randomUuid(), opts);\n\n  updateScope = (updateFunc: (scope: TestScope) => void, uuid?: string) => {\n    const resolvedUuid = uuid ?? this.contextProvider.getScope();\n    if (!resolvedUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"No current scope to update!\");\n      return;\n    }\n\n    const scope = this.state.getScope(resolvedUuid);\n    if (!scope) {\n      // eslint-disable-next-line no-console\n      console.error(`No scope ${resolvedUuid} to update!`);\n      return;\n    }\n\n    updateFunc(scope);\n  };\n\n  /**\n   * Removes a scope from the context. Use `writeScope` to emit its fixtures on disk then.\n   *\n   * If you just want to write the current stop, you may omit the call to this method and\n   * call `writeScope` with no uuid.\n   *\n   * @param uuid The UUID of the scope. If not provided, the current scope will be stopped.\n   *\n   * @returns The UUID of the scope that has been stopped.\n   */\n  stopScope = (uuid?: string) => {\n    const resolvedUuid = uuid ?? this.contextProvider.getScope();\n    if (!resolvedUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"No current scope to stop!\");\n      return;\n    }\n\n    this.contextProvider.removeScope(uuid);\n    return resolvedUuid;\n  };\n\n  /**\n   * Writes all fixtures of a scope on disk.\n   *\n   * @param uuid The UUID of the scope. If not provided, the current scope will\n   * be written and removed from the context. Don't call `stopScope` in that case.\n   */\n  writeScope = (uuid?: string) => {\n    const resolvedUuid = uuid ?? this.stopScope();\n\n    if (!resolvedUuid) {\n      return;\n    }\n\n    const scope = this.state.getScope(resolvedUuid);\n    if (!scope) {\n      // eslint-disable-next-line no-console\n      console.error(`No scope ${resolvedUuid} to write!`);\n      return;\n    }\n\n    this.writeAllFixturesOfScope(scope);\n    this.removeScopeFromParent(scope);\n    this.state.deleteScope(resolvedUuid);\n  };\n\n  /**\n   * Creates a new fixture result and puts it in the context as the current one.\n   *\n   * Use the `scope` parameter to control the fixture's scope. Use `updateScope`\n   * or `linkFixtures` to associate fixtures with tests that can't be linked\n   * automatically.\n   *\n   * Use `stopFixture` once the fixture is completed.\n   *\n   * Use `writeScope` or `writeFixture` to emit fixtures on disk.\n   *\n   * @param type The type of the fixture. It's either `\"before\"` or `\"after\"`.\n   * @param fixtureResult The fixture result data.\n   * @param scope\n   * @param dedicatedScope\n   * @param tests\n   * @returns The UUID of the new fixture.\n   */\n  startFixture = (\n    type: FixtureType,\n    fixtureResult: Partial<FixtureResult>,\n    { scope, dedicatedScope, tests }: StartFixtureOpts = {},\n  ) => {\n    dedicatedScope = dedicatedScope || (scope === null && !!tests);\n    const scopeObj = this.resolveScope(scope);\n    if (scopeObj === undefined) {\n      // eslint-disable-next-line no-console\n      console.error(\"Can't resolve the scope for a new fixture\");\n      return;\n    }\n\n    const uuid = randomUuid();\n    const wrappedFixture = this.state.setFixtureResult(uuid, type, {\n      ...createFixtureResult(),\n      start: Date.now(),\n      ...fixtureResult,\n    });\n\n    if (dedicatedScope || (tests && scopeObj === null)) {\n      this.setUpFixtureDedicatedScope(wrappedFixture, tests, scopeObj);\n    } else if (scopeObj !== null) {\n      this.linkFixtureToScope(wrappedFixture, scopeObj, tests);\n    }\n\n    this.contextProvider.setFixture(uuid);\n    return uuid;\n  };\n\n  updateFixture = (updateFunc: (result: FixtureResult) => void, uuid?: string) => {\n    const resolvedUuid = uuid ?? this.contextProvider.getFixture();\n\n    if (!resolvedUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"No current fixture to update!\");\n      return;\n    }\n\n    const fixture = this.state.getFixture(resolvedUuid);\n\n    if (!fixture) {\n      // eslint-disable-next-line no-console\n      console.error(`No fixture (${resolvedUuid}) to update!`);\n      return;\n    }\n\n    updateFunc(fixture);\n  };\n\n  /**\n   * Stops a fixture and removes it from the context. The fixture result will persist in\n   * the storage until it's written on disk with `writeScope` or `writeFixture`.\n   *\n   * @returns The UUID of the stopped fixture.\n   */\n  stopFixture = ({ uuid, stop }: StopOpts = {}) => {\n    const resolvedUuid = uuid ?? this.contextProvider.getFixture();\n    if (!resolvedUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"No current fixture to stop!\");\n      return;\n    }\n\n    const fixture = this.state.getFixture(resolvedUuid);\n    if (!fixture) {\n      // eslint-disable-next-line no-console\n      console.error(`No fixture (${resolvedUuid}) to stop!`);\n      return;\n    }\n\n    this.stopFixtureObj(fixture, uuid, stop);\n    return resolvedUuid;\n  };\n\n  /**\n   * Use to associate fixtures, scopes, and tests with each other.\n   *\n   * At least two arguments must be provided.\n   */\n  linkFixtures = ({ fixtures = [], scope, tests = [] }: LinkFixturesOpts) => {\n    const wrappedFixtures = fixtures\n      .map((f) => {\n        const obj = this.state.getWrappedFixture(f);\n        if (obj === undefined) {\n          // eslint-disable-next-line no-console\n          console.error(`No fixture (${f}) to link!`);\n        }\n        return obj;\n      })\n      .filter((f) => f) as FixtureWrapper[];\n\n    const scopeObj = scope ? this.state.getScope(scope) : null;\n    if (scopeObj === undefined) {\n      // eslint-disable-next-line no-console\n      console.error(`No scope (${scope!}) to link!`);\n      return;\n    }\n\n    if (wrappedFixtures.length && scopeObj) {\n      this.linkFixturesToScope(wrappedFixtures, scopeObj, tests);\n      return;\n    }\n\n    if (wrappedFixtures.length && tests.length) {\n      for (const fixture of wrappedFixtures) {\n        if (fixture.scope) {\n          this.linkTestsToScope(fixture.scope, tests);\n        } else {\n          this.setUpFixtureDedicatedScope(fixture, tests);\n        }\n      }\n      return;\n    }\n\n    if (scopeObj && tests) {\n      this.linkTestsToScope(scopeObj, tests);\n      return;\n    }\n\n    // eslint-disable-next-line no-console\n    console.error(\"Provide at least two arguments to link!\");\n  };\n\n  /**\n   * Emits a fixture on disk. Calls `stopFixture` prior to that in case the fixture\n   * hasn't been stopped yet. Use this method if you want to manage fixtures manually.\n   * Otherwise, use `writeScope`.\n   *\n   * If called without parameters, implicitly calls `stopFixture`. Make sure you don't call\n   * `stopFixture` by yourself in that case.\n   *\n   * The method has no effect if the fixture isn't associated with at least one test.\n   *\n   * @param uuid The UUID of the fixture. If not provided, the current fixture will\n   * be stopped and emitted. Don't call `stopFixture` in that case.\n   */\n  writeFixture = (uuid?: string) => {\n    const resolvedUuid = uuid ?? this.stopFixture();\n    if (!resolvedUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"Unable to stop the current fixture before write!\");\n      return;\n    }\n\n    const wrappedFixture = this.state.getWrappedFixture(resolvedUuid);\n    if (!wrappedFixture) {\n      // eslint-disable-next-line no-console\n      console.error(`No fixture (${resolvedUuid}) to write!`);\n      return;\n    }\n\n    const fixture = wrappedFixture.value;\n    if (fixture.stage !== Stage.FINISHED) {\n      this.stopFixtureObj(wrappedFixture.value, resolvedUuid);\n    }\n\n    const { scope } = wrappedFixture;\n    if (scope) {\n      this.writeContainer(scope.tests, wrappedFixture);\n      this.removeFixtureFromScope(scope, wrappedFixture);\n    }\n\n    this.state.deleteFixtureResult(resolvedUuid);\n  };\n\n  startTest = (result: Partial<TestResult>, { scope, dedicatedScope }: StartTestOpts = {}) => {\n    const stateObject = this.createTestResult(result);\n    const uuid = stateObject.uuid;\n\n    this.notifier.beforeTestResultStart(stateObject);\n\n    const resolvedScope = dedicatedScope\n      ? this.startScopeWithUuid(uuid, {\n          manual: scope !== undefined,\n          parent: scope ?? undefined,\n        })\n      : scope ?? this.contextProvider.getScope();\n\n    if (resolvedScope) {\n      this.introduceTestIntoScopes(uuid, resolvedScope);\n    }\n\n    this.state.setTestResult(uuid, stateObject);\n    this.contextProvider.setTest(uuid);\n\n    this.notifier.afterTestResultStart(stateObject);\n\n    return uuid;\n  };\n\n  /**\n   * Updates test result by uuid\n   * @example\n   * ```ts\n   * runtime.update(uuid, (result) => {\n   *   // change the result directly, you don't need to return anything\n   *   result.name = \"foo\";\n   * });\n   * ```\n   * @param updateFunc - a function that updates the test result; the result is passed as a single argument and should be mutated to apply the changes\n   * @param uuid - test result uuid\n   */\n  updateTest = (updateFunc: (result: TestResult) => void, uuid?: string) => {\n    const resolvedUuid = uuid ?? this.contextProvider.getTest();\n    if (!resolvedUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"No current test to update!\");\n      return;\n    }\n    const targetResult = this.state.getTest(resolvedUuid);\n\n    if (!targetResult) {\n      // eslint-disable-next-line no-console\n      console.error(`No test (${resolvedUuid}) to update!`);\n      return;\n    }\n\n    this.notifier.beforeTestResultUpdate(targetResult);\n    updateFunc(targetResult);\n    this.notifier.afterTestResultUpdate(targetResult);\n  };\n\n  stopTest = ({ uuid, stop }: StopOpts = {}) => {\n    const resolvedUuid = uuid ?? this.contextProvider.getTest();\n    if (!resolvedUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"No current test to stop!\");\n      return;\n    }\n\n    const targetResult = this.state.getTest(resolvedUuid);\n    if (!targetResult) {\n      // eslint-disable-next-line no-console\n      console.error(`No test (${resolvedUuid}) to stop!`);\n      return;\n    }\n\n    this.notifier.beforeTestResultStop(targetResult);\n    targetResult.testCaseId ??= getTestResultTestCaseId(targetResult);\n    targetResult.historyId ??= getTestResultHistoryId(targetResult);\n    targetResult.stop = stop || Date.now();\n\n    this.notifier.afterTestResultStop(targetResult);\n  };\n\n  /**\n   * Writes a test result on disk and removes it from the storage and the context.\n   * @param uuid The UUID of the test. If not set, the current test result is written.\n   */\n  writeTest = (uuid?: string) => {\n    const resolvedUuid = uuid ?? this.contextProvider.getTest();\n    if (!resolvedUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"No current test to write!\");\n      return;\n    }\n\n    const testResult = this.state.testResults.get(resolvedUuid);\n    if (!testResult) {\n      // eslint-disable-next-line no-console\n      console.error(`No test (${resolvedUuid}) to write!`);\n      return;\n    }\n\n    this.notifier.beforeTestResultWrite(testResult);\n\n    this.writer.writeResult(testResult);\n    this.contextProvider.removeTest(uuid);\n    this.state.deleteTestResult(resolvedUuid);\n\n    const currentScope = this.contextProvider.getScope();\n    if (currentScope === resolvedUuid) {\n      // Writes the scope introduced into the context by `startTest` with\n      // `dedicatedScope` set to `true`.\n      this.writeScope();\n    }\n\n    this.notifier.afterTestResultWrite(testResult);\n  };\n\n  /**\n   * Starts a new step and pushes it into the context.\n   *\n   * @param result Data to be put into the step result object.\n   * @param uuid The UUID of a test or fixture to attach the step to. If not set, the UUID of the current fixture is used.\n   * If no fixture is running, the UUID of the current test is used.\n   *\n   * @returns The UUID of the step.\n   */\n  startStep = (result: Partial<StepResult>, uuid?: string) => {\n    const parentUuid = this.contextProvider.getExecutingItem(uuid);\n    if (!parentUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"No current step, fixture, or test to start a new step!\");\n      return;\n    }\n\n    const parent = this.state.getExecutionItem(parentUuid);\n    if (!parent) {\n      // eslint-disable-next-line no-console\n      console.error(`No execution item (${parentUuid}) to start a step!`);\n      return;\n    }\n\n    return this.addStepToItem(result, uuid, parent);\n  };\n\n  updateStep = (updateFunc: (stepResult: StepResult) => void, uuid?: string) => {\n    const stepUuid = this.contextProvider.getStep(uuid);\n    if (!stepUuid) {\n      this.logMissingStepRoot(uuid, \"update\");\n      return;\n    }\n\n    const step = this.state.getStep(stepUuid)!;\n    if (!step) {\n      // eslint-disable-next-line no-console\n      console.error(`No step ${stepUuid} to update!`);\n      return;\n    }\n\n    updateFunc(step);\n  };\n\n  stopStep = ({ uuid, stop }: StopOpts = {}) => {\n    const stepUuid = this.contextProvider.getStep(uuid);\n    if (!stepUuid) {\n      this.logMissingStepRoot(uuid, \"stop\");\n      return;\n    }\n\n    const step = this.state.getStep(stepUuid);\n    if (!step) {\n      // eslint-disable-next-line no-console\n      console.error(`No step ${stepUuid} to stop!`);\n      return;\n    }\n\n    this.notifier.beforeStepStop(step);\n\n    step.stop = stop ?? Date.now();\n    step.stage = Stage.FINISHED;\n\n    this.state.deleteStepResult(stepUuid);\n    this.contextProvider.removeStep(uuid);\n\n    this.notifier.afterStepStop(step);\n  };\n\n  writeAttachment = (attachmentName: string, attachmentContent: Buffer, options: AttachmentOptions, uuid?: string) => {\n    const target = this.getCurrentExecutingItem(uuid);\n    if (!target) {\n      if (uuid) {\n        // eslint-disable-next-line no-console\n        console.error(`No test or fixture ${uuid} to attach!`);\n      } else {\n        // eslint-disable-next-line no-console\n        console.error(\"No current test or fixture to attach!\");\n      }\n      return;\n    }\n\n    this.writeAttachmentForItem(attachmentName, attachmentContent, options, target);\n  };\n\n  writeAttachmentFromPath = (\n    attachmentName: string,\n    attachmentPath: string,\n    options: AttachmentOptions,\n    uuid?: string,\n  ) => {\n    const target = this.getCurrentExecutingItem(uuid);\n    if (!target) {\n      if (uuid) {\n        // eslint-disable-next-line no-console\n        console.error(`No test or fixture ${uuid} to attach!`);\n      } else {\n        // eslint-disable-next-line no-console\n        console.error(\"No current test or fixture to attach!\");\n      }\n      return;\n    }\n    this.writeAttachmentForItem(attachmentName, attachmentPath, options, target);\n  };\n\n  writeEnvironmentInfo = () => {\n    if (!this.environmentInfo) {\n      return;\n    }\n\n    this.writer.writeEnvironmentInfo(this.environmentInfo);\n  };\n\n  writeCategoriesDefinitions = () => {\n    if (!this.categories) {\n      return;\n    }\n\n    const serializedCategories = this.categories.map((c) => {\n      if (c.messageRegex instanceof RegExp) {\n        c.messageRegex = c.messageRegex.source;\n      }\n\n      if (c.traceRegex instanceof RegExp) {\n        c.traceRegex = c.traceRegex.source;\n      }\n\n      return c;\n    });\n\n    this.writer.writeCategoriesDefinitions(serializedCategories);\n  };\n\n  applyRuntimeMessages = <T>(\n    messages: Messages<T>[] = [],\n    { testUuid, fixtureUuid, customHandler }: ApplyMessagesOpts<T> = {},\n  ) => {\n    const resolvedTestUuid = testUuid ?? this.contextProvider.getTest();\n    const resolvedFixtureUuid = fixtureUuid ?? this.contextProvider.getFixture();\n    const resolvedRootUuid = resolvedFixtureUuid ?? resolvedTestUuid ?? this.contextProvider.getStepRoot();\n\n    if (!resolvedRootUuid) {\n      // eslint-disable-next-line no-console\n      console.error(\"No current fixture or test to apply runtime messages to!\");\n      return;\n    }\n\n    const fixture = resolvedFixtureUuid ? this.state.getFixture(resolvedFixtureUuid) : undefined;\n    const test = resolvedTestUuid ? this.state.getTest(resolvedTestUuid) : undefined;\n    const root = fixture ?? test;\n\n    if (!root) {\n      // eslint-disable-next-line no-console\n      console.error(`No fixture or test (${resolvedRootUuid}) to apply runtime messages to!`);\n      return;\n    }\n\n    const targets: MessageTargets = {\n      fixtureUuid: resolvedFixtureUuid ?? undefined,\n      fixture,\n      testUuid: resolvedTestUuid ?? undefined,\n      test,\n      rootUuid: resolvedRootUuid,\n      root,\n    };\n\n    for (const message of messages) {\n      const step = this.getCurrentStep(resolvedRootUuid);\n\n      targets.step = step;\n\n      const unhandledMessage = this.handleBuiltInMessage(message, targets);\n\n      if (unhandledMessage && customHandler) {\n        customHandler(unhandledMessage, fixture, test, step);\n      }\n    }\n  };\n\n  protected createTestResult(result: Partial<TestResult>): TestResult {\n    const uuid = randomUuid();\n    return {\n      ...createTestResult(uuid),\n      start: Date.now(),\n      ...deepClone(result),\n    };\n  }\n\n  private handleBuiltInMessage = <T>(message: Messages<T>, targets: MessageTargets) => {\n    switch (message.type) {\n      case \"metadata\":\n        this.handleMetadataMessage(message as RuntimeMetadataMessage, targets);\n        return;\n      case \"step_start\":\n        this.handleStepStartMessage(message as RuntimeStartStepMessage, targets);\n        return;\n      case \"step_metadata\":\n        this.handleStepMetadataMessage(message as RuntimeStepMetadataMessage, targets);\n        return;\n      case \"step_stop\":\n        this.handleStepStopMessage(message as RuntimeStopStepMessage, targets);\n        return;\n      case \"attachment_content\":\n        this.handleAttachmentContentMessage(message as RuntimeAttachmentContentMessage, targets);\n        return;\n      case \"attachment_path\":\n        this.handleAttachmentPathMessage(message as RuntimeAttachmentPathMessage, targets);\n        return;\n      default:\n        return message as Exclude<Messages<T>, RuntimeMessage>;\n    }\n  };\n\n  private handleMetadataMessage = (message: RuntimeMetadataMessage, { test, root, step }: MessageTargets) => {\n    const { links = [], attachments = [], displayName, parameters = [], labels = [], ...rest } = message.data;\n    const formattedLinks = this.formatLinks(links);\n\n    if (displayName) {\n      root.name = displayName;\n    }\n\n    if (test) {\n      test.links = test.links.concat(formattedLinks);\n      test.labels = test.labels.concat(labels);\n      test.parameters = test.parameters.concat(parameters);\n      Object.assign(test, rest);\n    }\n\n    const attachmentTarget = step || root;\n    attachmentTarget.attachments = attachmentTarget.attachments.concat(attachments);\n  };\n\n  private handleStepStartMessage = (message: RuntimeStartStepMessage, { rootUuid, root, step }: MessageTargets) =>\n    this.addStepToItem({ ...message.data }, rootUuid, step ?? root);\n\n  private handleStepMetadataMessage = (message: RuntimeStepMetadataMessage, { rootUuid, step }: MessageTargets) => {\n    if (!step) {\n      // eslint-disable-next-line no-console\n      console.error(`No current step of ${rootUuid} to apply the metadata`);\n      return;\n    }\n    const { name, parameters } = message.data;\n    if (name) {\n      step.name = name;\n    }\n    if (parameters?.length) {\n      step.parameters = step.parameters.concat(parameters);\n    }\n  };\n\n  private handleStepStopMessage = (message: RuntimeStopStepMessage, { rootUuid, step }: MessageTargets) => {\n    if (!step) {\n      // eslint-disable-next-line no-console\n      console.error(`No current step of ${rootUuid} to stop`);\n      return;\n    }\n\n    const { status, stage, stop, ...rest } = message.data;\n\n    // we should not override the status and stage if they are already set\n    if (step.status === undefined) {\n      step.status = status;\n    }\n\n    if (step.stage === undefined) {\n      step.stage = stage;\n    }\n\n    Object.assign(step, rest);\n\n    this.stopStep({ uuid: rootUuid, stop });\n  };\n\n  private handleAttachmentContentMessage = (\n    message: RuntimeAttachmentContentMessage,\n    { root, step }: MessageTargets,\n  ) => {\n    const item: FixtureResult | TestResult | StepResult = step ?? root;\n    const { name, content, encoding, contentType, fileExtension, wrapInStep } = message.data;\n    this.writeAttachmentForItem(name, Buffer.from(content, encoding), { contentType, fileExtension }, item, wrapInStep);\n  };\n\n  private handleAttachmentPathMessage = (message: RuntimeAttachmentPathMessage, { root, step }: MessageTargets) => {\n    const item: FixtureResult | TestResult | StepResult = step ?? root;\n    const { name, path, contentType, fileExtension, wrapInStep } = message.data;\n    this.writeAttachmentForItem(name, path, { contentType, fileExtension }, item, wrapInStep);\n  };\n\n  private writeAttachmentForItem = (\n    attachmentName: string,\n    attachmentContentOrPath: Buffer | string,\n    options: Pick<AttachmentOptions, \"fileExtension\" | \"contentType\">,\n    item: StepResult | TestResult | FixtureResult,\n    wrapInStepAttachment: boolean = false,\n  ) => {\n    const isPath = typeof attachmentContentOrPath === \"string\";\n    const fileExtension = options.fileExtension ?? (isPath ? extname(attachmentContentOrPath) : undefined);\n    const attachmentFileName = buildAttachmentFileName({ contentType: options.contentType, fileExtension });\n\n    if (isPath) {\n      this.writer.writeAttachmentFromPath(attachmentFileName, attachmentContentOrPath);\n    } else {\n      this.writer.writeAttachment(attachmentFileName, attachmentContentOrPath);\n    }\n\n    const attachment: Attachment = {\n      name: attachmentName,\n      source: attachmentFileName,\n      type: options.contentType,\n    };\n\n    if (wrapInStepAttachment) {\n      item.steps.push({ name: attachmentName, attachments: [attachment] } as StepResult);\n    } else {\n      item.attachments.push(attachment);\n    }\n  };\n\n  private startScopeWithUuid = (uuid: string, { manual, parent }: StartScopeOpts = {}) => {\n    const newScope = this.state.setScope(uuid);\n\n    if (!manual) {\n      parent = this.contextProvider.getScope() ?? undefined;\n      this.contextProvider.addScope(uuid);\n    }\n    if (parent) {\n      const parentScope = this.state.getScope(parent);\n      if (parentScope) {\n        this.linkScopes(parentScope, newScope);\n      }\n    }\n    return uuid;\n  };\n\n  private resolveScope = (scopeUuid: string | undefined | null) => {\n    if (scopeUuid === null) {\n      return null;\n    }\n    scopeUuid = scopeUuid ?? this.contextProvider.getScope();\n    return scopeUuid ? this.state.getScope(scopeUuid) : null;\n  };\n\n  private removeScopeFromParent = (scope: TestScope) => {\n    const { subScopes } = scope.parent ?? {};\n    if (subScopes) {\n      const scopeIndex = subScopes.indexOf(scope);\n      if (scopeIndex !== -1) {\n        subScopes.splice(scopeIndex, 1);\n      }\n    }\n  };\n\n  private removeFixtureFromScope = ({ fixtures }: TestScope, wrappedFixture: FixtureWrapper) => {\n    const fixtureIndex = fixtures.indexOf(wrappedFixture);\n    if (fixtureIndex !== -1) {\n      fixtures.splice(fixtureIndex, 1);\n    }\n  };\n\n  private setUpFixtureDedicatedScope = (\n    wrappedFixture: FixtureWrapper,\n    tests: readonly string[] | undefined,\n    parentScope?: TestScope | null,\n  ) => {\n    const scope = this.state.setScope(wrappedFixture.uuid, {\n      fixtures: [wrappedFixture],\n      tests: [...(tests ?? [])],\n    });\n    wrappedFixture.scope = scope;\n    if (parentScope) {\n      this.linkScopes(parentScope, scope);\n    }\n  };\n\n  private linkScopes = (parent: TestScope, child: TestScope) => {\n    child.parent = parent;\n    parent.subScopes.push(child);\n  };\n\n  private linkFixturesToScope = (\n    wrappedFixtures: readonly FixtureWrapper[],\n    scope: TestScope,\n    extraTests: readonly string[] | undefined,\n  ) => {\n    for (const fixture of wrappedFixtures) {\n      this.linkFixtureToScope(fixture, scope, extraTests);\n    }\n  };\n\n  private linkFixtureToScope = (\n    wrappedFixture: FixtureWrapper,\n    scope: TestScope,\n    extraTests: readonly string[] | undefined,\n  ) => {\n    if (wrappedFixture.scope) {\n      const fixtureIndex = wrappedFixture.scope.fixtures.indexOf(wrappedFixture);\n      if (fixtureIndex !== -1) {\n        wrappedFixture.scope.fixtures.splice(fixtureIndex, 1);\n      }\n    }\n\n    wrappedFixture.scope = scope;\n    scope.fixtures.push(wrappedFixture);\n    if (extraTests) {\n      this.linkTestsToScope(scope, extraTests);\n    }\n  };\n\n  private stopFixtureObj = (fixture: FixtureResult, uuid?: string, stop?: number) => {\n    fixture.stop = stop ?? Date.now();\n    fixture.stage = Stage.FINISHED;\n\n    this.contextProvider.removeFixture(uuid);\n  };\n\n  private writeAllFixturesOfScope = (root: TestScope) => {\n    const stack = [root];\n    for (let scope = stack.pop(); scope; scope = stack.pop()) {\n      this.writeFixturesOfScope(scope);\n      this.state.deleteScope(scope.uuid);\n    }\n  };\n\n  private writeFixturesOfScope = ({ fixtures, tests }: TestScope) => {\n    const writtenFixtures = new Set<string>();\n    if (tests.length) {\n      for (const wrappedFixture of fixtures) {\n        if (!writtenFixtures.has(wrappedFixture.uuid)) {\n          this.writeContainer(tests, wrappedFixture);\n          this.state.deleteFixtureResult(wrappedFixture.uuid);\n          writtenFixtures.add(wrappedFixture.uuid);\n        }\n      }\n    }\n  };\n\n  private writeContainer = (tests: string[], wrappedFixture: FixtureWrapper) => {\n    const fixture = wrappedFixture.value;\n    const befores = wrappedFixture.type === \"before\" ? [wrappedFixture.value] : [];\n    const afters = wrappedFixture.type === \"after\" ? [wrappedFixture.value] : [];\n    this.writer.writeGroup({\n      uuid: randomUuid(),\n      name: fixture.name,\n      children: [...new Set(tests)],\n      befores,\n      afters,\n    });\n  };\n\n  private addStepToItem = (\n    data: Partial<StepResult>,\n    rootUuid: string | undefined,\n    parent: StepResult | TestResult | FixtureResult,\n  ) => {\n    const stepResult: StepResult = {\n      ...createStepResult(),\n      start: Date.now(),\n      ...data,\n    };\n    parent.steps.push(stepResult);\n    const stepUuid = randomUuid();\n    this.state.setStepResult(stepUuid, stepResult);\n\n    this.contextProvider.addStep(stepUuid, rootUuid);\n\n    return stepUuid;\n  };\n\n  private logMissingStepRoot = (uuid: string | undefined, op: string) => {\n    if (uuid) {\n      // eslint-disable-next-line no-console\n      console.error(`No test or fixture of (${uuid}) to ${op} the step!`);\n    } else {\n      // eslint-disable-next-line no-console\n      console.error(`No current step to ${op}!`);\n    }\n  };\n\n  private formatLinks = (links: Link[]) => {\n    if (!this.links.length) {\n      return links;\n    }\n\n    return links.map((link) => {\n      // TODO:\n      // @ts-ignore\n      const matcher = this.links?.find?.(({ type }) => type === link.type);\n\n      // TODO:\n      if (!matcher || link.url.startsWith(\"http\")) {\n        return link;\n      }\n\n      const url = matcher.urlTemplate.replace(\"%s\", link.url);\n\n      // we shouldn't need to reassign already assigned name\n      if (link.name || !matcher.nameTemplate) {\n        return {\n          ...link,\n          url,\n        };\n      }\n\n      const name = matcher.nameTemplate.replace(\"%s\", link.url);\n\n      return {\n        ...link,\n        name,\n        url,\n      };\n    });\n  };\n\n  private introduceTestIntoScopes = (testUuid: string, scopeUuid: string) => {\n    const scope = this.state.getScope(scopeUuid);\n    if (!scope) {\n      // eslint-disable-next-line no-console\n      console.error(`No scope ${scopeUuid} to introduce the test into`);\n      return;\n    }\n\n    this.linkTestsToScope(scope, [testUuid]);\n  };\n\n  private linkTestsToScope = (scope: TestScope, testUuids: readonly string[]) => {\n    for (let curScope: TestScope | undefined = scope; curScope; curScope = curScope.parent) {\n      curScope.tests.splice(curScope.tests.length, 0, ...testUuids);\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]}
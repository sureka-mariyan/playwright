function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
import { readFile } from "fs/promises";
import { createHash, randomUUID } from "node:crypto";
import fs from "node:fs";
import path from "node:path";
import process from "node:process";
import properties from "properties";
import { LabelName, StatusByPriority } from "../../model.js";
export var randomUuid = () => {
  return randomUUID();
};
export var md5 = str => {
  return createHash("md5").update(str).digest("hex");
};
export var getTestResultHistoryId = result => {
  var _result$testCaseId;
  if (result.historyId) {
    return result.historyId;
  }
  var tcId = (_result$testCaseId = result.testCaseId) !== null && _result$testCaseId !== void 0 ? _result$testCaseId : result.fullName ? md5(result.fullName) : null;
  if (!tcId) {
    return "";
  }
  var paramsString = result.parameters.filter(p => !(p !== null && p !== void 0 && p.excluded)).sort((a, b) => {
    var _a$name, _a$value;
    return ((_a$name = a.name) === null || _a$name === void 0 ? void 0 : _a$name.localeCompare(b === null || b === void 0 ? void 0 : b.name)) || ((_a$value = a.value) === null || _a$value === void 0 ? void 0 : _a$value.localeCompare(b === null || b === void 0 ? void 0 : b.value));
  }).map(p => {
    var _p$name, _p$value;
    return "".concat((_p$name = p.name) !== null && _p$name !== void 0 ? _p$name : "null", ":").concat((_p$value = p.value) !== null && _p$value !== void 0 ? _p$value : "null");
  }).join(",");
  var paramsHash = md5(paramsString);
  return "".concat(tcId, ":").concat(paramsHash);
};
export var getTestResultTestCaseId = result => {
  return result.fullName ? md5(result.fullName) : undefined;
};
export var getWorstStepResultStatusPriority = (steps, priority) => {
  var worstStatusPriority = priority;
  steps.forEach(step => {
    var _step$steps;
    if ((_step$steps = step.steps) !== null && _step$steps !== void 0 && _step$steps.length) {
      worstStatusPriority = getWorstStepResultStatusPriority(step.steps, worstStatusPriority);
    }
    var stepStatusPriority = step.status ? StatusByPriority.indexOf(step.status) : undefined;
    if (stepStatusPriority === undefined) {
      return;
    }
    if (worstStatusPriority === undefined) {
      worstStatusPriority = stepStatusPriority;
      return;
    }
    if (stepStatusPriority >= worstStatusPriority) {
      return;
    }
    worstStatusPriority = stepStatusPriority;
  });
  return worstStatusPriority;
};
export var getWorstStepResultStatus = steps => {
  var worstStatusPriority = getWorstStepResultStatusPriority(steps);
  if (worstStatusPriority === undefined) {
    return undefined;
  }
  return StatusByPriority[worstStatusPriority];
};
export var readImageAsBase64 = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (filePath) {
    try {
      var file = yield readFile(filePath, {
        encoding: "base64"
      });
      return file ? "data:image/png;base64,".concat(file) : undefined;
    } catch (e) {
      return undefined;
    }
  });
  return function readImageAsBase64(_x) {
    return _ref.apply(this, arguments);
  };
}();
var getProjectRoot = (() => {
  var cachedProjectRoot = null;
  var resolveProjectRootByPath = () => {
    var cwd = process.cwd();
    var nextDir = cwd;
    var dir;
    do {
      dir = nextDir;
      try {
        fs.accessSync(path.join(dir, "package.json"), fs.constants.F_OK);

        // package.json exists; use the directory as the project root
        return dir;
      } catch (_unused) {}
      nextDir = path.dirname(dir);
    } while (nextDir.length < dir.length);

    // package.json doesn't exist in any parent; fall back to CWD
    return cwd;
  };
  return () => {
    if (!cachedProjectRoot) {
      cachedProjectRoot = resolveProjectRootByPath();
    }
    return cachedProjectRoot;
  };
})();
export var getRelativePath = filepath => {
  if (path.isAbsolute(filepath)) {
    var projectRoot = getProjectRoot();
    filepath = path.relative(projectRoot, filepath);
  }
  return filepath;
};
export var getPackageLabelFromPath = filepath => ({
  name: LabelName.PACKAGE,
  value: getRelativePath(filepath).split(path.sep).filter(v => v).join(".")
});
export var deepClone = obj => JSON.parse(JSON.stringify(obj));
export var serialize = val => {
  if (typeof val === "object" && !(val instanceof Map || val instanceof Set)) {
    return JSON.stringify(val);
  }
  if (val === undefined) {
    return "undefined";
  }
  return val.toString();
};
export var getSuiteLabels = suites => {
  if (suites.length === 0) {
    return [];
  }
  var [parentSuite, suite, ...subSuites] = suites;
  var labels = [];
  if (parentSuite) {
    labels.push({
      name: LabelName.PARENT_SUITE,
      value: parentSuite
    });
  }
  if (suite) {
    labels.push({
      name: LabelName.SUITE,
      value: suite
    });
  }
  if (subSuites.length > 0) {
    labels.push({
      name: LabelName.SUB_SUITE,
      value: subSuites.join(" > ")
    });
  }
  return labels;
};
var suiteLabelNames = [LabelName.PARENT_SUITE, LabelName.SUITE, LabelName.SUB_SUITE];
export var ensureSuiteLabels = (test, defaultSuites) => {
  var _test$labels;
  if (!((_test$labels = test.labels) !== null && _test$labels !== void 0 && _test$labels.find(l => suiteLabelNames.includes(l.name)))) {
    var _test$labels2;
    test.labels = [...((_test$labels2 = test.labels) !== null && _test$labels2 !== void 0 ? _test$labels2 : []), ...getSuiteLabels(defaultSuites)];
  }
};
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
  reHasRegExpChar = RegExp(reRegExpChar.source);
export var escapeRegExp = value => {
  return reHasRegExpChar.test(value) ? value.replace(reRegExpChar, "\\$&") : value;
};
export var parseProperties = properties.parse;
export var stringifyProperties = properties.stringify;
//# sourceMappingURL=utils.js.map
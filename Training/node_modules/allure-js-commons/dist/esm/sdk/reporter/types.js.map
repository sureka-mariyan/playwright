{"version":3,"file":"types.js","names":["ALLURE_METADATA_CONTENT_TYPE","ALLURE_SKIPPED_BY_TEST_PLAN_LABEL","ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE"],"sources":["../../../../src/sdk/reporter/types.ts"],"sourcesContent":["import type {\n  FixtureResult,\n  Label,\n  Link,\n  Parameter,\n  StepResult,\n  TestResult,\n  TestResultContainer,\n} from \"../../model.js\";\nimport type { Category, EnvironmentInfo } from \"../types.js\";\nimport type { AllureContextProvider } from \"./context/types.js\";\n\nexport const ALLURE_METADATA_CONTENT_TYPE = \"application/vnd.allure.metadata+json\";\nexport const ALLURE_SKIPPED_BY_TEST_PLAN_LABEL = \"allure-skipped-by-test-plan\";\nexport const ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE = \"application/vnd.allure.message+json\";\n\nexport interface AttachmentMetadata {\n  name: string;\n  type: string;\n  content: string;\n  encoding: BufferEncoding;\n}\n\nexport interface StepMetadata extends Omit<StepResult, \"attachments\" | \"steps\"> {\n  steps: StepMetadata[];\n  attachments: AttachmentMetadata[];\n}\n\nexport interface MetadataMessage {\n  attachments?: AttachmentMetadata[];\n  displayName?: string;\n  testCaseId?: string;\n  historyId?: string;\n  labels?: Label[];\n  links?: Link[];\n  parameter?: Parameter[];\n  description?: string;\n  descriptionHtml?: string;\n  steps?: StepMetadata[];\n}\n\nexport interface LifecycleListener {\n  beforeTestResultStart?: (result: TestResult) => void;\n\n  afterTestResultStart?: (result: TestResult) => void;\n\n  beforeTestResultStop?: (result: TestResult) => void;\n\n  afterTestResultStop?: (result: TestResult) => void;\n\n  beforeTestResultUpdate?: (result: TestResult) => void;\n\n  afterTestResultUpdate?: (result: TestResult) => void;\n\n  beforeTestResultWrite?: (result: TestResult) => void;\n\n  afterTestResultWrite?: (result: TestResult) => void;\n\n  beforeStepStop?: (result: StepResult) => void;\n\n  afterStepStop?: (result: StepResult) => void;\n}\n\nexport interface LinkConfig {\n  type: string;\n  urlTemplate: string;\n  nameTemplate?: string;\n}\n\nexport type WriterDescriptor = [cls: string, ...args: readonly unknown[]] | string;\n\nexport interface Config {\n  readonly resultsDir?: string;\n  readonly writer: Writer | WriterDescriptor;\n  // TODO: handle lifecycle hooks here\n  readonly testMapper?: (test: TestResult) => TestResult | null;\n  readonly links?: LinkConfig[];\n  readonly listeners?: LifecycleListener[];\n  readonly environmentInfo?: EnvironmentInfo;\n  readonly categories?: Category[];\n  readonly contextProvider?: AllureContextProvider;\n}\n\nexport interface Writer {\n  writeResult(result: TestResult): void;\n\n  writeGroup(result: TestResultContainer): void;\n\n  writeAttachment(distFileName: string, content: Buffer): void;\n\n  writeAttachmentFromPath(distFileName: string, from: string): void;\n\n  writeEnvironmentInfo(info: EnvironmentInfo): void;\n\n  writeCategoriesDefinitions(categories: Category[]): void;\n}\n\nexport type WellKnownWriters = {\n  [key: string]: (new (...args: readonly unknown[]) => Writer) | undefined;\n};\n\nexport type TestScope = {\n  uuid: string;\n  tests: string[];\n  parent?: TestScope;\n  subScopes: TestScope[];\n  fixtures: FixtureWrapper[];\n};\n\nexport type FixtureType = \"before\" | \"after\";\n\nexport type FixtureWrapper = {\n  uuid: string;\n  value: FixtureResult;\n  scope?: TestScope;\n  type: FixtureType;\n};\n"],"mappings":"AAYA,OAAO,IAAMA,4BAA4B,GAAG,sCAAsC;AAClF,OAAO,IAAMC,iCAAiC,GAAG,6BAA6B;AAC9E,OAAO,IAAMC,mCAAmC,GAAG,qCAAqC","ignoreList":[]}
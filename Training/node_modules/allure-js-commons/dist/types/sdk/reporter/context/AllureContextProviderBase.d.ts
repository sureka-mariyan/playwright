import type { AllureContext, AllureContextHolder, AllureContextProvider } from "./types.js";
/**
 * Provides the set of methods to access and update the context.
 * Successor classes are responsible for persisting and accessing the context.
 */
export declare abstract class AllureContextProviderBase<TContext extends AllureContext, THolder extends AllureContextHolder<TContext>> implements AllureContextProvider {
    /**
     * Gets the holder that contains the current value of the context.
     */
    protected abstract load: () => THolder;
    /**
     * Persist the changes applied to the context since it was last time persisted.
     */
    protected abstract store: (holder: THolder) => void;
    getScope: () => string | null;
    getFixture: () => string | null;
    getTest: () => string | null;
    getStepRoot: () => string | null;
    getStep: (root?: string) => string | null;
    getExecutingItem: (root?: string) => string | null;
    addScope: (uuid: string) => void;
    removeScope: (uuid?: string) => void;
    setFixture: (uuid: string) => void;
    removeFixture: (uuid?: string) => void;
    setTest: (uuid: string) => void;
    removeTest: (uuid?: string) => void;
    addStep: (uuid: string, root?: string) => void;
    removeStep: (root?: string) => void;
    private getCurrentContext;
    private update;
}

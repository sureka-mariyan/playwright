import { AllureContextProviderBase } from "./AllureContextProviderBase.js";
import type { AllureContext, AllureContextHolder } from "./types.js";
/**
 * Allure context that stores its data in mutable class fields.
 * Unsafe from the cuncurrency standpoint.
 */
export declare class MutableAllureContext implements AllureContext {
    readonly scopeStack: string[];
    currentFixture: string | null;
    currentTest: string | null;
    readonly stepStacks: Map<string, string[]>;
    getScope: () => string | null;
    getFixture: () => string | null;
    getTest: () => string | null;
    getStep: (scope: string) => string | null;
    private static last;
}
/**
 * Implements transitioning between context values by mutating the context
 * object.
 * Unsafe from the cuncurrency standpoint.
 */
export declare class MutableAllureContextHolder implements AllureContextHolder<MutableAllureContext> {
    private readonly context;
    get: () => MutableAllureContext;
    addScope: (uuid: string) => void;
    removeScope: () => void;
    removeScopeByUuid: (uuid: string) => void;
    setFixture: (uuid: string) => void;
    removeFixture: () => void;
    setTest: (uuid: string) => void;
    removeTest: () => void;
    addStep: (scope: string, uuid: string) => void;
    removeStep: (scope: string) => void;
    removeStepByUuid: (scope: string, uuid: string) => void;
    private static removeAllOccurrences;
}
/**
 * Stores the context in a class field. That's a simple but not async-safe way of
 * manipulating the context.
 */
export declare class StaticContextProvider<TContext extends AllureContext, THolder extends AllureContextHolder<TContext>> extends AllureContextProviderBase<TContext, THolder> {
    private readonly holderSingleton;
    constructor(holderSingleton: THolder);
    protected load: () => THolder;
    protected store: (holder: THolder) => void;
    /**
     * Wraps a context holder singleton in the static context provider.
     * @param holderSingleton The singleton to wrap.
     */
    static wrap: <TContext_1 extends AllureContext, THolder_1 extends AllureContextHolder<TContext_1>>(holderSingleton: THolder_1) => StaticContextProvider<TContext_1, THolder_1>;
}
